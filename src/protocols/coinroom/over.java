// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coinroom/over.proto

package protocols.coinroom;

public final class over {
  private over() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface responseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 房间底分
     * </pre>
     *
     * <code>required uint32 base_score = 1;</code>
     */
    boolean hasBaseScore();
    /**
     * <pre>
     * 房间底分
     * </pre>
     *
     * <code>required uint32 base_score = 1;</code>
     */
    int getBaseScore();

    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    java.util.List<protocols.coinroom.over.seat_t> 
        getSeatsList();
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    protocols.coinroom.over.seat_t getSeats(int index);
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    int getSeatsCount();
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    java.util.List<? extends protocols.coinroom.over.seat_tOrBuilder> 
        getSeatsOrBuilderList();
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    protocols.coinroom.over.seat_tOrBuilder getSeatsOrBuilder(
        int index);

    /**
     * <pre>
     * 庄家
     * </pre>
     *
     * <code>optional uint32 bankerSeatId = 3;</code>
     */
    boolean hasBankerSeatId();
    /**
     * <pre>
     * 庄家
     * </pre>
     *
     * <code>optional uint32 bankerSeatId = 3;</code>
     */
    int getBankerSeatId();

    /**
     * <pre>
     * 庄家抢庄倍数
     * </pre>
     *
     * <code>optional uint32 bankerGrab = 4;</code>
     */
    boolean hasBankerGrab();
    /**
     * <pre>
     * 庄家抢庄倍数
     * </pre>
     *
     * <code>optional uint32 bankerGrab = 4;</code>
     */
    int getBankerGrab();
  }
  /**
   * <pre>
   * 返回 CMD 0x30
   * </pre>
   *
   * Protobuf type {@code response}
   */
  public  static final class response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:response)
      responseOrBuilder {
    // Use response.newBuilder() to construct.
    private response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private response() {
      baseScore_ = 0;
      seats_ = java.util.Collections.emptyList();
      bankerSeatId_ = 0;
      bankerGrab_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              baseScore_ = input.readUInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                seats_ = new java.util.ArrayList<protocols.coinroom.over.seat_t>();
                mutable_bitField0_ |= 0x00000002;
              }
              seats_.add(
                  input.readMessage(protocols.coinroom.over.seat_t.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              bankerSeatId_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              bankerGrab_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          seats_ = java.util.Collections.unmodifiableList(seats_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.coinroom.over.internal_static_response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.coinroom.over.internal_static_response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.coinroom.over.response.class, protocols.coinroom.over.response.Builder.class);
    }

    private int bitField0_;
    public static final int BASE_SCORE_FIELD_NUMBER = 1;
    private int baseScore_;
    /**
     * <pre>
     * 房间底分
     * </pre>
     *
     * <code>required uint32 base_score = 1;</code>
     */
    public boolean hasBaseScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 房间底分
     * </pre>
     *
     * <code>required uint32 base_score = 1;</code>
     */
    public int getBaseScore() {
      return baseScore_;
    }

    public static final int SEATS_FIELD_NUMBER = 2;
    private java.util.List<protocols.coinroom.over.seat_t> seats_;
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    public java.util.List<protocols.coinroom.over.seat_t> getSeatsList() {
      return seats_;
    }
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    public java.util.List<? extends protocols.coinroom.over.seat_tOrBuilder> 
        getSeatsOrBuilderList() {
      return seats_;
    }
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    public int getSeatsCount() {
      return seats_.size();
    }
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    public protocols.coinroom.over.seat_t getSeats(int index) {
      return seats_.get(index);
    }
    /**
     * <pre>
     * 座位信息
     * </pre>
     *
     * <code>repeated .seat_t seats = 2;</code>
     */
    public protocols.coinroom.over.seat_tOrBuilder getSeatsOrBuilder(
        int index) {
      return seats_.get(index);
    }

    public static final int BANKERSEATID_FIELD_NUMBER = 3;
    private int bankerSeatId_;
    /**
     * <pre>
     * 庄家
     * </pre>
     *
     * <code>optional uint32 bankerSeatId = 3;</code>
     */
    public boolean hasBankerSeatId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 庄家
     * </pre>
     *
     * <code>optional uint32 bankerSeatId = 3;</code>
     */
    public int getBankerSeatId() {
      return bankerSeatId_;
    }

    public static final int BANKERGRAB_FIELD_NUMBER = 4;
    private int bankerGrab_;
    /**
     * <pre>
     * 庄家抢庄倍数
     * </pre>
     *
     * <code>optional uint32 bankerGrab = 4;</code>
     */
    public boolean hasBankerGrab() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 庄家抢庄倍数
     * </pre>
     *
     * <code>optional uint32 bankerGrab = 4;</code>
     */
    public int getBankerGrab() {
      return bankerGrab_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasBaseScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSeatsCount(); i++) {
        if (!getSeats(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, baseScore_);
      }
      for (int i = 0; i < seats_.size(); i++) {
        output.writeMessage(2, seats_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, bankerSeatId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, bankerGrab_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, baseScore_);
      }
      for (int i = 0; i < seats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, seats_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bankerSeatId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, bankerGrab_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.coinroom.over.response)) {
        return super.equals(obj);
      }
      protocols.coinroom.over.response other = (protocols.coinroom.over.response) obj;

      boolean result = true;
      result = result && (hasBaseScore() == other.hasBaseScore());
      if (hasBaseScore()) {
        result = result && (getBaseScore()
            == other.getBaseScore());
      }
      result = result && getSeatsList()
          .equals(other.getSeatsList());
      result = result && (hasBankerSeatId() == other.hasBankerSeatId());
      if (hasBankerSeatId()) {
        result = result && (getBankerSeatId()
            == other.getBankerSeatId());
      }
      result = result && (hasBankerGrab() == other.hasBankerGrab());
      if (hasBankerGrab()) {
        result = result && (getBankerGrab()
            == other.getBankerGrab());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseScore()) {
        hash = (37 * hash) + BASE_SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getBaseScore();
      }
      if (getSeatsCount() > 0) {
        hash = (37 * hash) + SEATS_FIELD_NUMBER;
        hash = (53 * hash) + getSeatsList().hashCode();
      }
      if (hasBankerSeatId()) {
        hash = (37 * hash) + BANKERSEATID_FIELD_NUMBER;
        hash = (53 * hash) + getBankerSeatId();
      }
      if (hasBankerGrab()) {
        hash = (37 * hash) + BANKERGRAB_FIELD_NUMBER;
        hash = (53 * hash) + getBankerGrab();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.coinroom.over.response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.coinroom.over.response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.coinroom.over.response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.coinroom.over.response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.coinroom.over.response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.coinroom.over.response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.coinroom.over.response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.coinroom.over.response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 返回 CMD 0x30
     * </pre>
     *
     * Protobuf type {@code response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:response)
        protocols.coinroom.over.responseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.coinroom.over.internal_static_response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.coinroom.over.internal_static_response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.coinroom.over.response.class, protocols.coinroom.over.response.Builder.class);
      }

      // Construct using protocols.coinroom.over.response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSeatsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        baseScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          seatsBuilder_.clear();
        }
        bankerSeatId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerGrab_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.coinroom.over.internal_static_response_descriptor;
      }

      public protocols.coinroom.over.response getDefaultInstanceForType() {
        return protocols.coinroom.over.response.getDefaultInstance();
      }

      public protocols.coinroom.over.response build() {
        protocols.coinroom.over.response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.coinroom.over.response buildPartial() {
        protocols.coinroom.over.response result = new protocols.coinroom.over.response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.baseScore_ = baseScore_;
        if (seatsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            seats_ = java.util.Collections.unmodifiableList(seats_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.seats_ = seats_;
        } else {
          result.seats_ = seatsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerSeatId_ = bankerSeatId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bankerGrab_ = bankerGrab_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.coinroom.over.response) {
          return mergeFrom((protocols.coinroom.over.response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.coinroom.over.response other) {
        if (other == protocols.coinroom.over.response.getDefaultInstance()) return this;
        if (other.hasBaseScore()) {
          setBaseScore(other.getBaseScore());
        }
        if (seatsBuilder_ == null) {
          if (!other.seats_.isEmpty()) {
            if (seats_.isEmpty()) {
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSeatsIsMutable();
              seats_.addAll(other.seats_);
            }
            onChanged();
          }
        } else {
          if (!other.seats_.isEmpty()) {
            if (seatsBuilder_.isEmpty()) {
              seatsBuilder_.dispose();
              seatsBuilder_ = null;
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000002);
              seatsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSeatsFieldBuilder() : null;
            } else {
              seatsBuilder_.addAllMessages(other.seats_);
            }
          }
        }
        if (other.hasBankerSeatId()) {
          setBankerSeatId(other.getBankerSeatId());
        }
        if (other.hasBankerGrab()) {
          setBankerGrab(other.getBankerGrab());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBaseScore()) {
          return false;
        }
        for (int i = 0; i < getSeatsCount(); i++) {
          if (!getSeats(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.coinroom.over.response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.coinroom.over.response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int baseScore_ ;
      /**
       * <pre>
       * 房间底分
       * </pre>
       *
       * <code>required uint32 base_score = 1;</code>
       */
      public boolean hasBaseScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 房间底分
       * </pre>
       *
       * <code>required uint32 base_score = 1;</code>
       */
      public int getBaseScore() {
        return baseScore_;
      }
      /**
       * <pre>
       * 房间底分
       * </pre>
       *
       * <code>required uint32 base_score = 1;</code>
       */
      public Builder setBaseScore(int value) {
        bitField0_ |= 0x00000001;
        baseScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 房间底分
       * </pre>
       *
       * <code>required uint32 base_score = 1;</code>
       */
      public Builder clearBaseScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        baseScore_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<protocols.coinroom.over.seat_t> seats_ =
        java.util.Collections.emptyList();
      private void ensureSeatsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          seats_ = new java.util.ArrayList<protocols.coinroom.over.seat_t>(seats_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.coinroom.over.seat_t, protocols.coinroom.over.seat_t.Builder, protocols.coinroom.over.seat_tOrBuilder> seatsBuilder_;

      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public java.util.List<protocols.coinroom.over.seat_t> getSeatsList() {
        if (seatsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(seats_);
        } else {
          return seatsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public int getSeatsCount() {
        if (seatsBuilder_ == null) {
          return seats_.size();
        } else {
          return seatsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public protocols.coinroom.over.seat_t getSeats(int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);
        } else {
          return seatsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder setSeats(
          int index, protocols.coinroom.over.seat_t value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.set(index, value);
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder setSeats(
          int index, protocols.coinroom.over.seat_t.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.set(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder addSeats(protocols.coinroom.over.seat_t value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder addSeats(
          int index, protocols.coinroom.over.seat_t value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(index, value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder addSeats(
          protocols.coinroom.over.seat_t.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder addSeats(
          int index, protocols.coinroom.over.seat_t.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder addAllSeats(
          java.lang.Iterable<? extends protocols.coinroom.over.seat_t> values) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, seats_);
          onChanged();
        } else {
          seatsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder clearSeats() {
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          seatsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public Builder removeSeats(int index) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.remove(index);
          onChanged();
        } else {
          seatsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public protocols.coinroom.over.seat_t.Builder getSeatsBuilder(
          int index) {
        return getSeatsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public protocols.coinroom.over.seat_tOrBuilder getSeatsOrBuilder(
          int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);  } else {
          return seatsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public java.util.List<? extends protocols.coinroom.over.seat_tOrBuilder> 
           getSeatsOrBuilderList() {
        if (seatsBuilder_ != null) {
          return seatsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(seats_);
        }
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public protocols.coinroom.over.seat_t.Builder addSeatsBuilder() {
        return getSeatsFieldBuilder().addBuilder(
            protocols.coinroom.over.seat_t.getDefaultInstance());
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public protocols.coinroom.over.seat_t.Builder addSeatsBuilder(
          int index) {
        return getSeatsFieldBuilder().addBuilder(
            index, protocols.coinroom.over.seat_t.getDefaultInstance());
      }
      /**
       * <pre>
       * 座位信息
       * </pre>
       *
       * <code>repeated .seat_t seats = 2;</code>
       */
      public java.util.List<protocols.coinroom.over.seat_t.Builder> 
           getSeatsBuilderList() {
        return getSeatsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.coinroom.over.seat_t, protocols.coinroom.over.seat_t.Builder, protocols.coinroom.over.seat_tOrBuilder> 
          getSeatsFieldBuilder() {
        if (seatsBuilder_ == null) {
          seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.coinroom.over.seat_t, protocols.coinroom.over.seat_t.Builder, protocols.coinroom.over.seat_tOrBuilder>(
                  seats_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          seats_ = null;
        }
        return seatsBuilder_;
      }

      private int bankerSeatId_ ;
      /**
       * <pre>
       * 庄家
       * </pre>
       *
       * <code>optional uint32 bankerSeatId = 3;</code>
       */
      public boolean hasBankerSeatId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 庄家
       * </pre>
       *
       * <code>optional uint32 bankerSeatId = 3;</code>
       */
      public int getBankerSeatId() {
        return bankerSeatId_;
      }
      /**
       * <pre>
       * 庄家
       * </pre>
       *
       * <code>optional uint32 bankerSeatId = 3;</code>
       */
      public Builder setBankerSeatId(int value) {
        bitField0_ |= 0x00000004;
        bankerSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家
       * </pre>
       *
       * <code>optional uint32 bankerSeatId = 3;</code>
       */
      public Builder clearBankerSeatId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerSeatId_ = 0;
        onChanged();
        return this;
      }

      private int bankerGrab_ ;
      /**
       * <pre>
       * 庄家抢庄倍数
       * </pre>
       *
       * <code>optional uint32 bankerGrab = 4;</code>
       */
      public boolean hasBankerGrab() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 庄家抢庄倍数
       * </pre>
       *
       * <code>optional uint32 bankerGrab = 4;</code>
       */
      public int getBankerGrab() {
        return bankerGrab_;
      }
      /**
       * <pre>
       * 庄家抢庄倍数
       * </pre>
       *
       * <code>optional uint32 bankerGrab = 4;</code>
       */
      public Builder setBankerGrab(int value) {
        bitField0_ |= 0x00000008;
        bankerGrab_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家抢庄倍数
       * </pre>
       *
       * <code>optional uint32 bankerGrab = 4;</code>
       */
      public Builder clearBankerGrab() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerGrab_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:response)
    }

    // @@protoc_insertion_point(class_scope:response)
    private static final protocols.coinroom.over.response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.coinroom.over.response();
    }

    public static protocols.coinroom.over.response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<response>
        PARSER = new com.google.protobuf.AbstractParser<response>() {
      public response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<response> getParserForType() {
      return PARSER;
    }

    public protocols.coinroom.over.response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface seat_tOrBuilder extends
      // @@protoc_insertion_point(interface_extends:seat_t)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>required uint32 seatId = 1;</code>
     */
    boolean hasSeatId();
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>required uint32 seatId = 1;</code>
     */
    int getSeatId();

    /**
     * <pre>
     * 抢庄倍数
     * </pre>
     *
     * <code>required uint32 grab = 2;</code>
     */
    boolean hasGrab();
    /**
     * <pre>
     * 抢庄倍数
     * </pre>
     *
     * <code>required uint32 grab = 2;</code>
     */
    int getGrab();

    /**
     * <pre>
     * 下注倍数
     * </pre>
     *
     * <code>required uint32 bet = 3;</code>
     */
    boolean hasBet();
    /**
     * <pre>
     * 下注倍数
     * </pre>
     *
     * <code>required uint32 bet = 3;</code>
     */
    int getBet();

    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    java.util.List<java.lang.Integer> getHandList();
    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    int getHandCount();
    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    int getHand(int index);

    /**
     * <pre>
     * 手牌牌型
     * </pre>
     *
     * <code>required uint32 cardType = 5;</code>
     */
    boolean hasCardType();
    /**
     * <pre>
     * 手牌牌型
     * </pre>
     *
     * <code>required uint32 cardType = 5;</code>
     */
    int getCardType();

    /**
     * <pre>
     * 牌型倍数
     * </pre>
     *
     * <code>required uint32 cardTypeMul = 6;</code>
     */
    boolean hasCardTypeMul();
    /**
     * <pre>
     * 牌型倍数
     * </pre>
     *
     * <code>required uint32 cardTypeMul = 6;</code>
     */
    int getCardTypeMul();

    /**
     * <pre>
     * 单局分数
     * </pre>
     *
     * <code>required sint32 score = 7;</code>
     */
    boolean hasScore();
    /**
     * <pre>
     * 单局分数
     * </pre>
     *
     * <code>required sint32 score = 7;</code>
     */
    int getScore();

    /**
     * <pre>
     * 单局抽水
     * </pre>
     *
     * <code>required uint32 draw = 8;</code>
     */
    boolean hasDraw();
    /**
     * <pre>
     * 单局抽水
     * </pre>
     *
     * <code>required uint32 draw = 8;</code>
     */
    int getDraw();

    /**
     * <pre>
     * 剩下的金币数
     * </pre>
     *
     * <code>required uint32 remainCoin = 9;</code>
     */
    boolean hasRemainCoin();
    /**
     * <pre>
     * 剩下的金币数
     * </pre>
     *
     * <code>required uint32 remainCoin = 9;</code>
     */
    int getRemainCoin();

    /**
     * <pre>
     * true则提醒用户充值
     * </pre>
     *
     * <code>required bool needCharge = 10;</code>
     */
    boolean hasNeedCharge();
    /**
     * <pre>
     * true则提醒用户充值
     * </pre>
     *
     * <code>required bool needCharge = 10;</code>
     */
    boolean getNeedCharge();

    /**
     * <pre>
     * 提示充值到多少比较合适
     * </pre>
     *
     * <code>optional uint32 chargeTo = 11;</code>
     */
    boolean hasChargeTo();
    /**
     * <pre>
     * 提示充值到多少比较合适
     * </pre>
     *
     * <code>optional uint32 chargeTo = 11;</code>
     */
    int getChargeTo();
  }
  /**
   * <pre>
   * 座位
   * </pre>
   *
   * Protobuf type {@code seat_t}
   */
  public  static final class seat_t extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:seat_t)
      seat_tOrBuilder {
    // Use seat_t.newBuilder() to construct.
    private seat_t(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private seat_t() {
      seatId_ = 0;
      grab_ = 0;
      bet_ = 0;
      hand_ = java.util.Collections.emptyList();
      cardType_ = 0;
      cardTypeMul_ = 0;
      score_ = 0;
      draw_ = 0;
      remainCoin_ = 0;
      needCharge_ = false;
      chargeTo_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private seat_t(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              grab_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bet_ = input.readUInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                hand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              hand_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                hand_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                hand_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              cardType_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              cardTypeMul_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              score_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              draw_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              remainCoin_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              needCharge_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              chargeTo_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          hand_ = java.util.Collections.unmodifiableList(hand_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.coinroom.over.internal_static_seat_t_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.coinroom.over.internal_static_seat_t_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.coinroom.over.seat_t.class, protocols.coinroom.over.seat_t.Builder.class);
    }

    private int bitField0_;
    public static final int SEATID_FIELD_NUMBER = 1;
    private int seatId_;
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>required uint32 seatId = 1;</code>
     */
    public boolean hasSeatId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>required uint32 seatId = 1;</code>
     */
    public int getSeatId() {
      return seatId_;
    }

    public static final int GRAB_FIELD_NUMBER = 2;
    private int grab_;
    /**
     * <pre>
     * 抢庄倍数
     * </pre>
     *
     * <code>required uint32 grab = 2;</code>
     */
    public boolean hasGrab() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 抢庄倍数
     * </pre>
     *
     * <code>required uint32 grab = 2;</code>
     */
    public int getGrab() {
      return grab_;
    }

    public static final int BET_FIELD_NUMBER = 3;
    private int bet_;
    /**
     * <pre>
     * 下注倍数
     * </pre>
     *
     * <code>required uint32 bet = 3;</code>
     */
    public boolean hasBet() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 下注倍数
     * </pre>
     *
     * <code>required uint32 bet = 3;</code>
     */
    public int getBet() {
      return bet_;
    }

    public static final int HAND_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> hand_;
    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getHandList() {
      return hand_;
    }
    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    public int getHandCount() {
      return hand_.size();
    }
    /**
     * <pre>
     * 手牌
     * </pre>
     *
     * <code>repeated uint32 hand = 4;</code>
     */
    public int getHand(int index) {
      return hand_.get(index);
    }

    public static final int CARDTYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <pre>
     * 手牌牌型
     * </pre>
     *
     * <code>required uint32 cardType = 5;</code>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 手牌牌型
     * </pre>
     *
     * <code>required uint32 cardType = 5;</code>
     */
    public int getCardType() {
      return cardType_;
    }

    public static final int CARDTYPEMUL_FIELD_NUMBER = 6;
    private int cardTypeMul_;
    /**
     * <pre>
     * 牌型倍数
     * </pre>
     *
     * <code>required uint32 cardTypeMul = 6;</code>
     */
    public boolean hasCardTypeMul() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 牌型倍数
     * </pre>
     *
     * <code>required uint32 cardTypeMul = 6;</code>
     */
    public int getCardTypeMul() {
      return cardTypeMul_;
    }

    public static final int SCORE_FIELD_NUMBER = 7;
    private int score_;
    /**
     * <pre>
     * 单局分数
     * </pre>
     *
     * <code>required sint32 score = 7;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 单局分数
     * </pre>
     *
     * <code>required sint32 score = 7;</code>
     */
    public int getScore() {
      return score_;
    }

    public static final int DRAW_FIELD_NUMBER = 8;
    private int draw_;
    /**
     * <pre>
     * 单局抽水
     * </pre>
     *
     * <code>required uint32 draw = 8;</code>
     */
    public boolean hasDraw() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 单局抽水
     * </pre>
     *
     * <code>required uint32 draw = 8;</code>
     */
    public int getDraw() {
      return draw_;
    }

    public static final int REMAINCOIN_FIELD_NUMBER = 9;
    private int remainCoin_;
    /**
     * <pre>
     * 剩下的金币数
     * </pre>
     *
     * <code>required uint32 remainCoin = 9;</code>
     */
    public boolean hasRemainCoin() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * 剩下的金币数
     * </pre>
     *
     * <code>required uint32 remainCoin = 9;</code>
     */
    public int getRemainCoin() {
      return remainCoin_;
    }

    public static final int NEEDCHARGE_FIELD_NUMBER = 10;
    private boolean needCharge_;
    /**
     * <pre>
     * true则提醒用户充值
     * </pre>
     *
     * <code>required bool needCharge = 10;</code>
     */
    public boolean hasNeedCharge() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * true则提醒用户充值
     * </pre>
     *
     * <code>required bool needCharge = 10;</code>
     */
    public boolean getNeedCharge() {
      return needCharge_;
    }

    public static final int CHARGETO_FIELD_NUMBER = 11;
    private int chargeTo_;
    /**
     * <pre>
     * 提示充值到多少比较合适
     * </pre>
     *
     * <code>optional uint32 chargeTo = 11;</code>
     */
    public boolean hasChargeTo() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * 提示充值到多少比较合适
     * </pre>
     *
     * <code>optional uint32 chargeTo = 11;</code>
     */
    public int getChargeTo() {
      return chargeTo_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSeatId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGrab()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBet()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCardType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCardTypeMul()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDraw()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRemainCoin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNeedCharge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seatId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, grab_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, bet_);
      }
      for (int i = 0; i < hand_.size(); i++) {
        output.writeUInt32(4, hand_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, cardTypeMul_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, score_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, draw_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(9, remainCoin_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, needCharge_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(11, chargeTo_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seatId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, grab_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bet_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < hand_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(hand_.get(i));
        }
        size += dataSize;
        size += 1 * getHandList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, cardTypeMul_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, score_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, draw_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, remainCoin_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, needCharge_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, chargeTo_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.coinroom.over.seat_t)) {
        return super.equals(obj);
      }
      protocols.coinroom.over.seat_t other = (protocols.coinroom.over.seat_t) obj;

      boolean result = true;
      result = result && (hasSeatId() == other.hasSeatId());
      if (hasSeatId()) {
        result = result && (getSeatId()
            == other.getSeatId());
      }
      result = result && (hasGrab() == other.hasGrab());
      if (hasGrab()) {
        result = result && (getGrab()
            == other.getGrab());
      }
      result = result && (hasBet() == other.hasBet());
      if (hasBet()) {
        result = result && (getBet()
            == other.getBet());
      }
      result = result && getHandList()
          .equals(other.getHandList());
      result = result && (hasCardType() == other.hasCardType());
      if (hasCardType()) {
        result = result && (getCardType()
            == other.getCardType());
      }
      result = result && (hasCardTypeMul() == other.hasCardTypeMul());
      if (hasCardTypeMul()) {
        result = result && (getCardTypeMul()
            == other.getCardTypeMul());
      }
      result = result && (hasScore() == other.hasScore());
      if (hasScore()) {
        result = result && (getScore()
            == other.getScore());
      }
      result = result && (hasDraw() == other.hasDraw());
      if (hasDraw()) {
        result = result && (getDraw()
            == other.getDraw());
      }
      result = result && (hasRemainCoin() == other.hasRemainCoin());
      if (hasRemainCoin()) {
        result = result && (getRemainCoin()
            == other.getRemainCoin());
      }
      result = result && (hasNeedCharge() == other.hasNeedCharge());
      if (hasNeedCharge()) {
        result = result && (getNeedCharge()
            == other.getNeedCharge());
      }
      result = result && (hasChargeTo() == other.hasChargeTo());
      if (hasChargeTo()) {
        result = result && (getChargeTo()
            == other.getChargeTo());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSeatId()) {
        hash = (37 * hash) + SEATID_FIELD_NUMBER;
        hash = (53 * hash) + getSeatId();
      }
      if (hasGrab()) {
        hash = (37 * hash) + GRAB_FIELD_NUMBER;
        hash = (53 * hash) + getGrab();
      }
      if (hasBet()) {
        hash = (37 * hash) + BET_FIELD_NUMBER;
        hash = (53 * hash) + getBet();
      }
      if (getHandCount() > 0) {
        hash = (37 * hash) + HAND_FIELD_NUMBER;
        hash = (53 * hash) + getHandList().hashCode();
      }
      if (hasCardType()) {
        hash = (37 * hash) + CARDTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getCardType();
      }
      if (hasCardTypeMul()) {
        hash = (37 * hash) + CARDTYPEMUL_FIELD_NUMBER;
        hash = (53 * hash) + getCardTypeMul();
      }
      if (hasScore()) {
        hash = (37 * hash) + SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getScore();
      }
      if (hasDraw()) {
        hash = (37 * hash) + DRAW_FIELD_NUMBER;
        hash = (53 * hash) + getDraw();
      }
      if (hasRemainCoin()) {
        hash = (37 * hash) + REMAINCOIN_FIELD_NUMBER;
        hash = (53 * hash) + getRemainCoin();
      }
      if (hasNeedCharge()) {
        hash = (37 * hash) + NEEDCHARGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNeedCharge());
      }
      if (hasChargeTo()) {
        hash = (37 * hash) + CHARGETO_FIELD_NUMBER;
        hash = (53 * hash) + getChargeTo();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.coinroom.over.seat_t parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.coinroom.over.seat_t parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.coinroom.over.seat_t parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.coinroom.over.seat_t parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.coinroom.over.seat_t parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.seat_t parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.coinroom.over.seat_t parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.seat_t parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.coinroom.over.seat_t parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.coinroom.over.seat_t parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.coinroom.over.seat_t prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 座位
     * </pre>
     *
     * Protobuf type {@code seat_t}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:seat_t)
        protocols.coinroom.over.seat_tOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.coinroom.over.internal_static_seat_t_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.coinroom.over.internal_static_seat_t_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.coinroom.over.seat_t.class, protocols.coinroom.over.seat_t.Builder.class);
      }

      // Construct using protocols.coinroom.over.seat_t.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        seatId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        grab_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        hand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        cardTypeMul_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        draw_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        remainCoin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        needCharge_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        chargeTo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.coinroom.over.internal_static_seat_t_descriptor;
      }

      public protocols.coinroom.over.seat_t getDefaultInstanceForType() {
        return protocols.coinroom.over.seat_t.getDefaultInstance();
      }

      public protocols.coinroom.over.seat_t build() {
        protocols.coinroom.over.seat_t result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.coinroom.over.seat_t buildPartial() {
        protocols.coinroom.over.seat_t result = new protocols.coinroom.over.seat_t(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatId_ = seatId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.grab_ = grab_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bet_ = bet_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          hand_ = java.util.Collections.unmodifiableList(hand_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.hand_ = hand_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cardTypeMul_ = cardTypeMul_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.draw_ = draw_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.remainCoin_ = remainCoin_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.needCharge_ = needCharge_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.chargeTo_ = chargeTo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.coinroom.over.seat_t) {
          return mergeFrom((protocols.coinroom.over.seat_t)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.coinroom.over.seat_t other) {
        if (other == protocols.coinroom.over.seat_t.getDefaultInstance()) return this;
        if (other.hasSeatId()) {
          setSeatId(other.getSeatId());
        }
        if (other.hasGrab()) {
          setGrab(other.getGrab());
        }
        if (other.hasBet()) {
          setBet(other.getBet());
        }
        if (!other.hand_.isEmpty()) {
          if (hand_.isEmpty()) {
            hand_ = other.hand_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHandIsMutable();
            hand_.addAll(other.hand_);
          }
          onChanged();
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCardTypeMul()) {
          setCardTypeMul(other.getCardTypeMul());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasDraw()) {
          setDraw(other.getDraw());
        }
        if (other.hasRemainCoin()) {
          setRemainCoin(other.getRemainCoin());
        }
        if (other.hasNeedCharge()) {
          setNeedCharge(other.getNeedCharge());
        }
        if (other.hasChargeTo()) {
          setChargeTo(other.getChargeTo());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeatId()) {
          return false;
        }
        if (!hasGrab()) {
          return false;
        }
        if (!hasBet()) {
          return false;
        }
        if (!hasCardType()) {
          return false;
        }
        if (!hasCardTypeMul()) {
          return false;
        }
        if (!hasScore()) {
          return false;
        }
        if (!hasDraw()) {
          return false;
        }
        if (!hasRemainCoin()) {
          return false;
        }
        if (!hasNeedCharge()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.coinroom.over.seat_t parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.coinroom.over.seat_t) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int seatId_ ;
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>required uint32 seatId = 1;</code>
       */
      public boolean hasSeatId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>required uint32 seatId = 1;</code>
       */
      public int getSeatId() {
        return seatId_;
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>required uint32 seatId = 1;</code>
       */
      public Builder setSeatId(int value) {
        bitField0_ |= 0x00000001;
        seatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>required uint32 seatId = 1;</code>
       */
      public Builder clearSeatId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatId_ = 0;
        onChanged();
        return this;
      }

      private int grab_ ;
      /**
       * <pre>
       * 抢庄倍数
       * </pre>
       *
       * <code>required uint32 grab = 2;</code>
       */
      public boolean hasGrab() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 抢庄倍数
       * </pre>
       *
       * <code>required uint32 grab = 2;</code>
       */
      public int getGrab() {
        return grab_;
      }
      /**
       * <pre>
       * 抢庄倍数
       * </pre>
       *
       * <code>required uint32 grab = 2;</code>
       */
      public Builder setGrab(int value) {
        bitField0_ |= 0x00000002;
        grab_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 抢庄倍数
       * </pre>
       *
       * <code>required uint32 grab = 2;</code>
       */
      public Builder clearGrab() {
        bitField0_ = (bitField0_ & ~0x00000002);
        grab_ = 0;
        onChanged();
        return this;
      }

      private int bet_ ;
      /**
       * <pre>
       * 下注倍数
       * </pre>
       *
       * <code>required uint32 bet = 3;</code>
       */
      public boolean hasBet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 下注倍数
       * </pre>
       *
       * <code>required uint32 bet = 3;</code>
       */
      public int getBet() {
        return bet_;
      }
      /**
       * <pre>
       * 下注倍数
       * </pre>
       *
       * <code>required uint32 bet = 3;</code>
       */
      public Builder setBet(int value) {
        bitField0_ |= 0x00000004;
        bet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下注倍数
       * </pre>
       *
       * <code>required uint32 bet = 3;</code>
       */
      public Builder clearBet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bet_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> hand_ = java.util.Collections.emptyList();
      private void ensureHandIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          hand_ = new java.util.ArrayList<java.lang.Integer>(hand_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getHandList() {
        return java.util.Collections.unmodifiableList(hand_);
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public int getHandCount() {
        return hand_.size();
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public int getHand(int index) {
        return hand_.get(index);
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public Builder setHand(
          int index, int value) {
        ensureHandIsMutable();
        hand_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public Builder addHand(int value) {
        ensureHandIsMutable();
        hand_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public Builder addAllHand(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hand_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 手牌
       * </pre>
       *
       * <code>repeated uint32 hand = 4;</code>
       */
      public Builder clearHand() {
        hand_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private int cardType_ ;
      /**
       * <pre>
       * 手牌牌型
       * </pre>
       *
       * <code>required uint32 cardType = 5;</code>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * 手牌牌型
       * </pre>
       *
       * <code>required uint32 cardType = 5;</code>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <pre>
       * 手牌牌型
       * </pre>
       *
       * <code>required uint32 cardType = 5;</code>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 手牌牌型
       * </pre>
       *
       * <code>required uint32 cardType = 5;</code>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      private int cardTypeMul_ ;
      /**
       * <pre>
       * 牌型倍数
       * </pre>
       *
       * <code>required uint32 cardTypeMul = 6;</code>
       */
      public boolean hasCardTypeMul() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * 牌型倍数
       * </pre>
       *
       * <code>required uint32 cardTypeMul = 6;</code>
       */
      public int getCardTypeMul() {
        return cardTypeMul_;
      }
      /**
       * <pre>
       * 牌型倍数
       * </pre>
       *
       * <code>required uint32 cardTypeMul = 6;</code>
       */
      public Builder setCardTypeMul(int value) {
        bitField0_ |= 0x00000020;
        cardTypeMul_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 牌型倍数
       * </pre>
       *
       * <code>required uint32 cardTypeMul = 6;</code>
       */
      public Builder clearCardTypeMul() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cardTypeMul_ = 0;
        onChanged();
        return this;
      }

      private int score_ ;
      /**
       * <pre>
       * 单局分数
       * </pre>
       *
       * <code>required sint32 score = 7;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 单局分数
       * </pre>
       *
       * <code>required sint32 score = 7;</code>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <pre>
       * 单局分数
       * </pre>
       *
       * <code>required sint32 score = 7;</code>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000040;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 单局分数
       * </pre>
       *
       * <code>required sint32 score = 7;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0;
        onChanged();
        return this;
      }

      private int draw_ ;
      /**
       * <pre>
       * 单局抽水
       * </pre>
       *
       * <code>required uint32 draw = 8;</code>
       */
      public boolean hasDraw() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * 单局抽水
       * </pre>
       *
       * <code>required uint32 draw = 8;</code>
       */
      public int getDraw() {
        return draw_;
      }
      /**
       * <pre>
       * 单局抽水
       * </pre>
       *
       * <code>required uint32 draw = 8;</code>
       */
      public Builder setDraw(int value) {
        bitField0_ |= 0x00000080;
        draw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 单局抽水
       * </pre>
       *
       * <code>required uint32 draw = 8;</code>
       */
      public Builder clearDraw() {
        bitField0_ = (bitField0_ & ~0x00000080);
        draw_ = 0;
        onChanged();
        return this;
      }

      private int remainCoin_ ;
      /**
       * <pre>
       * 剩下的金币数
       * </pre>
       *
       * <code>required uint32 remainCoin = 9;</code>
       */
      public boolean hasRemainCoin() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * 剩下的金币数
       * </pre>
       *
       * <code>required uint32 remainCoin = 9;</code>
       */
      public int getRemainCoin() {
        return remainCoin_;
      }
      /**
       * <pre>
       * 剩下的金币数
       * </pre>
       *
       * <code>required uint32 remainCoin = 9;</code>
       */
      public Builder setRemainCoin(int value) {
        bitField0_ |= 0x00000100;
        remainCoin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 剩下的金币数
       * </pre>
       *
       * <code>required uint32 remainCoin = 9;</code>
       */
      public Builder clearRemainCoin() {
        bitField0_ = (bitField0_ & ~0x00000100);
        remainCoin_ = 0;
        onChanged();
        return this;
      }

      private boolean needCharge_ ;
      /**
       * <pre>
       * true则提醒用户充值
       * </pre>
       *
       * <code>required bool needCharge = 10;</code>
       */
      public boolean hasNeedCharge() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * true则提醒用户充值
       * </pre>
       *
       * <code>required bool needCharge = 10;</code>
       */
      public boolean getNeedCharge() {
        return needCharge_;
      }
      /**
       * <pre>
       * true则提醒用户充值
       * </pre>
       *
       * <code>required bool needCharge = 10;</code>
       */
      public Builder setNeedCharge(boolean value) {
        bitField0_ |= 0x00000200;
        needCharge_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * true则提醒用户充值
       * </pre>
       *
       * <code>required bool needCharge = 10;</code>
       */
      public Builder clearNeedCharge() {
        bitField0_ = (bitField0_ & ~0x00000200);
        needCharge_ = false;
        onChanged();
        return this;
      }

      private int chargeTo_ ;
      /**
       * <pre>
       * 提示充值到多少比较合适
       * </pre>
       *
       * <code>optional uint32 chargeTo = 11;</code>
       */
      public boolean hasChargeTo() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * 提示充值到多少比较合适
       * </pre>
       *
       * <code>optional uint32 chargeTo = 11;</code>
       */
      public int getChargeTo() {
        return chargeTo_;
      }
      /**
       * <pre>
       * 提示充值到多少比较合适
       * </pre>
       *
       * <code>optional uint32 chargeTo = 11;</code>
       */
      public Builder setChargeTo(int value) {
        bitField0_ |= 0x00000400;
        chargeTo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 提示充值到多少比较合适
       * </pre>
       *
       * <code>optional uint32 chargeTo = 11;</code>
       */
      public Builder clearChargeTo() {
        bitField0_ = (bitField0_ & ~0x00000400);
        chargeTo_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:seat_t)
    }

    // @@protoc_insertion_point(class_scope:seat_t)
    private static final protocols.coinroom.over.seat_t DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.coinroom.over.seat_t();
    }

    public static protocols.coinroom.over.seat_t getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<seat_t>
        PARSER = new com.google.protobuf.AbstractParser<seat_t>() {
      public seat_t parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new seat_t(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<seat_t> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<seat_t> getParserForType() {
      return PARSER;
    }

    public protocols.coinroom.over.seat_t getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_seat_t_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_seat_t_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023coinroom/over.proto\"`\n\010response\022\022\n\nbas" +
      "e_score\030\001 \002(\r\022\026\n\005seats\030\002 \003(\0132\007.seat_t\022\024\n" +
      "\014bankerSeatId\030\003 \001(\r\022\022\n\nbankerGrab\030\004 \001(\r\"" +
      "\277\001\n\006seat_t\022\016\n\006seatId\030\001 \002(\r\022\014\n\004grab\030\002 \002(\r" +
      "\022\013\n\003bet\030\003 \002(\r\022\014\n\004hand\030\004 \003(\r\022\020\n\010cardType\030" +
      "\005 \002(\r\022\023\n\013cardTypeMul\030\006 \002(\r\022\r\n\005score\030\007 \002(" +
      "\021\022\014\n\004draw\030\010 \002(\r\022\022\n\nremainCoin\030\t \002(\r\022\022\n\nn" +
      "eedCharge\030\n \002(\010\022\020\n\010chargeTo\030\013 \001(\rB\032\n\022pro" +
      "tocols.coinroomB\004over"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_response_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_response_descriptor,
        new java.lang.String[] { "BaseScore", "Seats", "BankerSeatId", "BankerGrab", });
    internal_static_seat_t_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_seat_t_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_seat_t_descriptor,
        new java.lang.String[] { "SeatId", "Grab", "Bet", "Hand", "CardType", "CardTypeMul", "Score", "Draw", "RemainCoin", "NeedCharge", "ChargeTo", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}

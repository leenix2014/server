// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baccarat/common.proto

package protocols.baccarat;

public final class common {
  private common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *下注枚举，仅服务端使用
   * </pre>
   *
   * Protobuf enum {@code beton}
   */
  public enum beton
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 庄
     * </pre>
     *
     * <code>banker_win = 0;</code>
     */
    banker_win(0),
    /**
     * <pre>
     * 闲
     * </pre>
     *
     * <code>player_win = 1;</code>
     */
    player_win(1),
    /**
     * <pre>
     * 庄对
     * </pre>
     *
     * <code>banker_pair = 2;</code>
     */
    banker_pair(2),
    /**
     * <pre>
     * 闲对
     * </pre>
     *
     * <code>player_pair = 3;</code>
     */
    player_pair(3),
    /**
     * <pre>
     * 和
     * </pre>
     *
     * <code>tie = 4;</code>
     */
    tie(4),
    ;

    /**
     * <pre>
     * 庄
     * </pre>
     *
     * <code>banker_win = 0;</code>
     */
    public static final int banker_win_VALUE = 0;
    /**
     * <pre>
     * 闲
     * </pre>
     *
     * <code>player_win = 1;</code>
     */
    public static final int player_win_VALUE = 1;
    /**
     * <pre>
     * 庄对
     * </pre>
     *
     * <code>banker_pair = 2;</code>
     */
    public static final int banker_pair_VALUE = 2;
    /**
     * <pre>
     * 闲对
     * </pre>
     *
     * <code>player_pair = 3;</code>
     */
    public static final int player_pair_VALUE = 3;
    /**
     * <pre>
     * 和
     * </pre>
     *
     * <code>tie = 4;</code>
     */
    public static final int tie_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static beton valueOf(int value) {
      return forNumber(value);
    }

    public static beton forNumber(int value) {
      switch (value) {
        case 0: return banker_win;
        case 1: return player_win;
        case 2: return banker_pair;
        case 3: return player_pair;
        case 4: return tie;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<beton>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        beton> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<beton>() {
            public beton findValueByNumber(int number) {
              return beton.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return protocols.baccarat.common.getDescriptor().getEnumTypes().get(0);
    }

    private static final beton[] VALUES = values();

    public static beton valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private beton(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:beton)
  }

  public interface room_infoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:room_info)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    boolean hasRoomId();
    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    java.lang.String getRoomId();
    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    com.google.protobuf.ByteString
        getRoomIdBytes();

    /**
     * <pre>
     * 加入房间最少金币数
     * </pre>
     *
     * <code>optional uint32 minCoin = 3;</code>
     */
    boolean hasMinCoin();
    /**
     * <pre>
     * 加入房间最少金币数
     * </pre>
     *
     * <code>optional uint32 minCoin = 3;</code>
     */
    int getMinCoin();

    /**
     * <pre>
     * 单次最小下注额
     * </pre>
     *
     * <code>optional uint32 minBet = 4;</code>
     */
    boolean hasMinBet();
    /**
     * <pre>
     * 单次最小下注额
     * </pre>
     *
     * <code>optional uint32 minBet = 4;</code>
     */
    int getMinBet();

    /**
     * <pre>
     * 单次最大下注额
     * </pre>
     *
     * <code>optional uint32 maxBet = 5;</code>
     */
    boolean hasMaxBet();
    /**
     * <pre>
     * 单次最大下注额
     * </pre>
     *
     * <code>optional uint32 maxBet = 5;</code>
     */
    int getMaxBet();

    /**
     * <pre>
     * 和、对子最小下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMinBet = 6;</code>
     */
    boolean hasTiePairMinBet();
    /**
     * <pre>
     * 和、对子最小下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMinBet = 6;</code>
     */
    int getTiePairMinBet();

    /**
     * <pre>
     * 和、对子最大下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMaxBet = 7;</code>
     */
    boolean hasTiePairMaxBet();
    /**
     * <pre>
     * 和、对子最大下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMaxBet = 7;</code>
     */
    int getTiePairMaxBet();

    /**
     * <pre>
     * 限红
     * </pre>
     *
     * <code>optional uint32 maxRed = 8;</code>
     */
    boolean hasMaxRed();
    /**
     * <pre>
     * 限红
     * </pre>
     *
     * <code>optional uint32 maxRed = 8;</code>
     */
    int getMaxRed();

    /**
     * <pre>
     * 抽水百分比
     * </pre>
     *
     * <code>optional uint32 drawPercent = 9;</code>
     */
    boolean hasDrawPercent();
    /**
     * <pre>
     * 抽水百分比
     * </pre>
     *
     * <code>optional uint32 drawPercent = 9;</code>
     */
    int getDrawPercent();

    /**
     * <pre>
     * 下注时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 betTime = 10;</code>
     */
    boolean hasBetTime();
    /**
     * <pre>
     * 下注时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 betTime = 10;</code>
     */
    int getBetTime();

    /**
     * <pre>
     * 开奖后时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 overTime = 11;</code>
     */
    boolean hasOverTime();
    /**
     * <pre>
     * 开奖后时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 overTime = 11;</code>
     */
    int getOverTime();

    /**
     * <pre>
     * 玩家人数
     * </pre>
     *
     * <code>optional uint32 playerCount = 12;</code>
     */
    boolean hasPlayerCount();
    /**
     * <pre>
     * 玩家人数
     * </pre>
     *
     * <code>optional uint32 playerCount = 12;</code>
     */
    int getPlayerCount();

    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 13;</code>
     */
    boolean hasRemains();
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 13;</code>
     */
    int getRemains();

    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    boolean hasChannel();
    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    java.lang.String getChannel();
    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    com.google.protobuf.ByteString
        getChannelBytes();
  }
  /**
   * Protobuf type {@code room_info}
   */
  public  static final class room_info extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:room_info)
      room_infoOrBuilder {
    // Use room_info.newBuilder() to construct.
    private room_info(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private room_info() {
      roomId_ = "";
      minCoin_ = 0;
      minBet_ = 0;
      maxBet_ = 0;
      tiePairMinBet_ = 0;
      tiePairMaxBet_ = 0;
      maxRed_ = 0;
      drawPercent_ = 0;
      betTime_ = 0;
      overTime_ = 0;
      playerCount_ = 0;
      remains_ = 0;
      channel_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private room_info(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              roomId_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              minCoin_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              minBet_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              maxBet_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              tiePairMinBet_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              tiePairMaxBet_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              maxRed_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              drawPercent_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              betTime_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              overTime_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              playerCount_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              remains_ = input.readUInt32();
              break;
            }
            case 114: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              channel_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_room_info_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_room_info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.room_info.class, protocols.baccarat.common.room_info.Builder.class);
    }

    private int bitField0_;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private volatile java.lang.Object roomId_;
    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    public java.lang.String getRoomId() {
      java.lang.Object ref = roomId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          roomId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 房间号
     * </pre>
     *
     * <code>required string roomId = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRoomIdBytes() {
      java.lang.Object ref = roomId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        roomId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MINCOIN_FIELD_NUMBER = 3;
    private int minCoin_;
    /**
     * <pre>
     * 加入房间最少金币数
     * </pre>
     *
     * <code>optional uint32 minCoin = 3;</code>
     */
    public boolean hasMinCoin() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 加入房间最少金币数
     * </pre>
     *
     * <code>optional uint32 minCoin = 3;</code>
     */
    public int getMinCoin() {
      return minCoin_;
    }

    public static final int MINBET_FIELD_NUMBER = 4;
    private int minBet_;
    /**
     * <pre>
     * 单次最小下注额
     * </pre>
     *
     * <code>optional uint32 minBet = 4;</code>
     */
    public boolean hasMinBet() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 单次最小下注额
     * </pre>
     *
     * <code>optional uint32 minBet = 4;</code>
     */
    public int getMinBet() {
      return minBet_;
    }

    public static final int MAXBET_FIELD_NUMBER = 5;
    private int maxBet_;
    /**
     * <pre>
     * 单次最大下注额
     * </pre>
     *
     * <code>optional uint32 maxBet = 5;</code>
     */
    public boolean hasMaxBet() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 单次最大下注额
     * </pre>
     *
     * <code>optional uint32 maxBet = 5;</code>
     */
    public int getMaxBet() {
      return maxBet_;
    }

    public static final int TIEPAIRMINBET_FIELD_NUMBER = 6;
    private int tiePairMinBet_;
    /**
     * <pre>
     * 和、对子最小下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMinBet = 6;</code>
     */
    public boolean hasTiePairMinBet() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 和、对子最小下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMinBet = 6;</code>
     */
    public int getTiePairMinBet() {
      return tiePairMinBet_;
    }

    public static final int TIEPAIRMAXBET_FIELD_NUMBER = 7;
    private int tiePairMaxBet_;
    /**
     * <pre>
     * 和、对子最大下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMaxBet = 7;</code>
     */
    public boolean hasTiePairMaxBet() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 和、对子最大下注额
     * </pre>
     *
     * <code>optional uint32 tiePairMaxBet = 7;</code>
     */
    public int getTiePairMaxBet() {
      return tiePairMaxBet_;
    }

    public static final int MAXRED_FIELD_NUMBER = 8;
    private int maxRed_;
    /**
     * <pre>
     * 限红
     * </pre>
     *
     * <code>optional uint32 maxRed = 8;</code>
     */
    public boolean hasMaxRed() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 限红
     * </pre>
     *
     * <code>optional uint32 maxRed = 8;</code>
     */
    public int getMaxRed() {
      return maxRed_;
    }

    public static final int DRAWPERCENT_FIELD_NUMBER = 9;
    private int drawPercent_;
    /**
     * <pre>
     * 抽水百分比
     * </pre>
     *
     * <code>optional uint32 drawPercent = 9;</code>
     */
    public boolean hasDrawPercent() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * 抽水百分比
     * </pre>
     *
     * <code>optional uint32 drawPercent = 9;</code>
     */
    public int getDrawPercent() {
      return drawPercent_;
    }

    public static final int BETTIME_FIELD_NUMBER = 10;
    private int betTime_;
    /**
     * <pre>
     * 下注时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 betTime = 10;</code>
     */
    public boolean hasBetTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * 下注时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 betTime = 10;</code>
     */
    public int getBetTime() {
      return betTime_;
    }

    public static final int OVERTIME_FIELD_NUMBER = 11;
    private int overTime_;
    /**
     * <pre>
     * 开奖后时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 overTime = 11;</code>
     */
    public boolean hasOverTime() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * 开奖后时长，以秒为单位
     * </pre>
     *
     * <code>optional uint32 overTime = 11;</code>
     */
    public int getOverTime() {
      return overTime_;
    }

    public static final int PLAYERCOUNT_FIELD_NUMBER = 12;
    private int playerCount_;
    /**
     * <pre>
     * 玩家人数
     * </pre>
     *
     * <code>optional uint32 playerCount = 12;</code>
     */
    public boolean hasPlayerCount() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * 玩家人数
     * </pre>
     *
     * <code>optional uint32 playerCount = 12;</code>
     */
    public int getPlayerCount() {
      return playerCount_;
    }

    public static final int REMAINS_FIELD_NUMBER = 13;
    private int remains_;
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 13;</code>
     */
    public boolean hasRemains() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 13;</code>
     */
    public int getRemains() {
      return remains_;
    }

    public static final int CHANNEL_FIELD_NUMBER = 14;
    private volatile java.lang.Object channel_;
    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    public java.lang.String getChannel() {
      java.lang.Object ref = channel_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          channel_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 声网频道号
     * </pre>
     *
     * <code>optional string channel = 14;</code>
     */
    public com.google.protobuf.ByteString
        getChannelBytes() {
      java.lang.Object ref = channel_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        channel_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRoomId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, minCoin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, minBet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, maxBet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, tiePairMinBet_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, tiePairMaxBet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, maxRed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(9, drawPercent_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(10, betTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(11, overTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(12, playerCount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(13, remains_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, channel_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, minCoin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, minBet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, maxBet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, tiePairMinBet_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, tiePairMaxBet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, maxRed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, drawPercent_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, betTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, overTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, playerCount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, remains_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, channel_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.room_info)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.room_info other = (protocols.baccarat.common.room_info) obj;

      boolean result = true;
      result = result && (hasRoomId() == other.hasRoomId());
      if (hasRoomId()) {
        result = result && getRoomId()
            .equals(other.getRoomId());
      }
      result = result && (hasMinCoin() == other.hasMinCoin());
      if (hasMinCoin()) {
        result = result && (getMinCoin()
            == other.getMinCoin());
      }
      result = result && (hasMinBet() == other.hasMinBet());
      if (hasMinBet()) {
        result = result && (getMinBet()
            == other.getMinBet());
      }
      result = result && (hasMaxBet() == other.hasMaxBet());
      if (hasMaxBet()) {
        result = result && (getMaxBet()
            == other.getMaxBet());
      }
      result = result && (hasTiePairMinBet() == other.hasTiePairMinBet());
      if (hasTiePairMinBet()) {
        result = result && (getTiePairMinBet()
            == other.getTiePairMinBet());
      }
      result = result && (hasTiePairMaxBet() == other.hasTiePairMaxBet());
      if (hasTiePairMaxBet()) {
        result = result && (getTiePairMaxBet()
            == other.getTiePairMaxBet());
      }
      result = result && (hasMaxRed() == other.hasMaxRed());
      if (hasMaxRed()) {
        result = result && (getMaxRed()
            == other.getMaxRed());
      }
      result = result && (hasDrawPercent() == other.hasDrawPercent());
      if (hasDrawPercent()) {
        result = result && (getDrawPercent()
            == other.getDrawPercent());
      }
      result = result && (hasBetTime() == other.hasBetTime());
      if (hasBetTime()) {
        result = result && (getBetTime()
            == other.getBetTime());
      }
      result = result && (hasOverTime() == other.hasOverTime());
      if (hasOverTime()) {
        result = result && (getOverTime()
            == other.getOverTime());
      }
      result = result && (hasPlayerCount() == other.hasPlayerCount());
      if (hasPlayerCount()) {
        result = result && (getPlayerCount()
            == other.getPlayerCount());
      }
      result = result && (hasRemains() == other.hasRemains());
      if (hasRemains()) {
        result = result && (getRemains()
            == other.getRemains());
      }
      result = result && (hasChannel() == other.hasChannel());
      if (hasChannel()) {
        result = result && getChannel()
            .equals(other.getChannel());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRoomId()) {
        hash = (37 * hash) + ROOMID_FIELD_NUMBER;
        hash = (53 * hash) + getRoomId().hashCode();
      }
      if (hasMinCoin()) {
        hash = (37 * hash) + MINCOIN_FIELD_NUMBER;
        hash = (53 * hash) + getMinCoin();
      }
      if (hasMinBet()) {
        hash = (37 * hash) + MINBET_FIELD_NUMBER;
        hash = (53 * hash) + getMinBet();
      }
      if (hasMaxBet()) {
        hash = (37 * hash) + MAXBET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBet();
      }
      if (hasTiePairMinBet()) {
        hash = (37 * hash) + TIEPAIRMINBET_FIELD_NUMBER;
        hash = (53 * hash) + getTiePairMinBet();
      }
      if (hasTiePairMaxBet()) {
        hash = (37 * hash) + TIEPAIRMAXBET_FIELD_NUMBER;
        hash = (53 * hash) + getTiePairMaxBet();
      }
      if (hasMaxRed()) {
        hash = (37 * hash) + MAXRED_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRed();
      }
      if (hasDrawPercent()) {
        hash = (37 * hash) + DRAWPERCENT_FIELD_NUMBER;
        hash = (53 * hash) + getDrawPercent();
      }
      if (hasBetTime()) {
        hash = (37 * hash) + BETTIME_FIELD_NUMBER;
        hash = (53 * hash) + getBetTime();
      }
      if (hasOverTime()) {
        hash = (37 * hash) + OVERTIME_FIELD_NUMBER;
        hash = (53 * hash) + getOverTime();
      }
      if (hasPlayerCount()) {
        hash = (37 * hash) + PLAYERCOUNT_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerCount();
      }
      if (hasRemains()) {
        hash = (37 * hash) + REMAINS_FIELD_NUMBER;
        hash = (53 * hash) + getRemains();
      }
      if (hasChannel()) {
        hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getChannel().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.room_info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.room_info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.room_info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.room_info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.room_info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.room_info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.room_info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.room_info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.room_info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.room_info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.room_info prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code room_info}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:room_info)
        protocols.baccarat.common.room_infoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_room_info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_room_info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.room_info.class, protocols.baccarat.common.room_info.Builder.class);
      }

      // Construct using protocols.baccarat.common.room_info.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        roomId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        minCoin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        minBet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxBet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tiePairMinBet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        tiePairMaxBet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxRed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        drawPercent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        betTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        overTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        playerCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        remains_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        channel_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_room_info_descriptor;
      }

      public protocols.baccarat.common.room_info getDefaultInstanceForType() {
        return protocols.baccarat.common.room_info.getDefaultInstance();
      }

      public protocols.baccarat.common.room_info build() {
        protocols.baccarat.common.room_info result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.room_info buildPartial() {
        protocols.baccarat.common.room_info result = new protocols.baccarat.common.room_info(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.minCoin_ = minCoin_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minBet_ = minBet_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxBet_ = maxBet_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.tiePairMinBet_ = tiePairMinBet_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.tiePairMaxBet_ = tiePairMaxBet_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxRed_ = maxRed_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.drawPercent_ = drawPercent_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.betTime_ = betTime_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.overTime_ = overTime_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.playerCount_ = playerCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.remains_ = remains_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.channel_ = channel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.room_info) {
          return mergeFrom((protocols.baccarat.common.room_info)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.room_info other) {
        if (other == protocols.baccarat.common.room_info.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          bitField0_ |= 0x00000001;
          roomId_ = other.roomId_;
          onChanged();
        }
        if (other.hasMinCoin()) {
          setMinCoin(other.getMinCoin());
        }
        if (other.hasMinBet()) {
          setMinBet(other.getMinBet());
        }
        if (other.hasMaxBet()) {
          setMaxBet(other.getMaxBet());
        }
        if (other.hasTiePairMinBet()) {
          setTiePairMinBet(other.getTiePairMinBet());
        }
        if (other.hasTiePairMaxBet()) {
          setTiePairMaxBet(other.getTiePairMaxBet());
        }
        if (other.hasMaxRed()) {
          setMaxRed(other.getMaxRed());
        }
        if (other.hasDrawPercent()) {
          setDrawPercent(other.getDrawPercent());
        }
        if (other.hasBetTime()) {
          setBetTime(other.getBetTime());
        }
        if (other.hasOverTime()) {
          setOverTime(other.getOverTime());
        }
        if (other.hasPlayerCount()) {
          setPlayerCount(other.getPlayerCount());
        }
        if (other.hasRemains()) {
          setRemains(other.getRemains());
        }
        if (other.hasChannel()) {
          bitField0_ |= 0x00001000;
          channel_ = other.channel_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRoomId()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.room_info parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.room_info) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object roomId_ = "";
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public java.lang.String getRoomId() {
        java.lang.Object ref = roomId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            roomId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public com.google.protobuf.ByteString
          getRoomIdBytes() {
        java.lang.Object ref = roomId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          roomId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public Builder setRoomId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = getDefaultInstance().getRoomId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 房间号
       * </pre>
       *
       * <code>required string roomId = 1;</code>
       */
      public Builder setRoomIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }

      private int minCoin_ ;
      /**
       * <pre>
       * 加入房间最少金币数
       * </pre>
       *
       * <code>optional uint32 minCoin = 3;</code>
       */
      public boolean hasMinCoin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 加入房间最少金币数
       * </pre>
       *
       * <code>optional uint32 minCoin = 3;</code>
       */
      public int getMinCoin() {
        return minCoin_;
      }
      /**
       * <pre>
       * 加入房间最少金币数
       * </pre>
       *
       * <code>optional uint32 minCoin = 3;</code>
       */
      public Builder setMinCoin(int value) {
        bitField0_ |= 0x00000002;
        minCoin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 加入房间最少金币数
       * </pre>
       *
       * <code>optional uint32 minCoin = 3;</code>
       */
      public Builder clearMinCoin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minCoin_ = 0;
        onChanged();
        return this;
      }

      private int minBet_ ;
      /**
       * <pre>
       * 单次最小下注额
       * </pre>
       *
       * <code>optional uint32 minBet = 4;</code>
       */
      public boolean hasMinBet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 单次最小下注额
       * </pre>
       *
       * <code>optional uint32 minBet = 4;</code>
       */
      public int getMinBet() {
        return minBet_;
      }
      /**
       * <pre>
       * 单次最小下注额
       * </pre>
       *
       * <code>optional uint32 minBet = 4;</code>
       */
      public Builder setMinBet(int value) {
        bitField0_ |= 0x00000004;
        minBet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 单次最小下注额
       * </pre>
       *
       * <code>optional uint32 minBet = 4;</code>
       */
      public Builder clearMinBet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minBet_ = 0;
        onChanged();
        return this;
      }

      private int maxBet_ ;
      /**
       * <pre>
       * 单次最大下注额
       * </pre>
       *
       * <code>optional uint32 maxBet = 5;</code>
       */
      public boolean hasMaxBet() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 单次最大下注额
       * </pre>
       *
       * <code>optional uint32 maxBet = 5;</code>
       */
      public int getMaxBet() {
        return maxBet_;
      }
      /**
       * <pre>
       * 单次最大下注额
       * </pre>
       *
       * <code>optional uint32 maxBet = 5;</code>
       */
      public Builder setMaxBet(int value) {
        bitField0_ |= 0x00000008;
        maxBet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 单次最大下注额
       * </pre>
       *
       * <code>optional uint32 maxBet = 5;</code>
       */
      public Builder clearMaxBet() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxBet_ = 0;
        onChanged();
        return this;
      }

      private int tiePairMinBet_ ;
      /**
       * <pre>
       * 和、对子最小下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMinBet = 6;</code>
       */
      public boolean hasTiePairMinBet() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * 和、对子最小下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMinBet = 6;</code>
       */
      public int getTiePairMinBet() {
        return tiePairMinBet_;
      }
      /**
       * <pre>
       * 和、对子最小下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMinBet = 6;</code>
       */
      public Builder setTiePairMinBet(int value) {
        bitField0_ |= 0x00000010;
        tiePairMinBet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 和、对子最小下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMinBet = 6;</code>
       */
      public Builder clearTiePairMinBet() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tiePairMinBet_ = 0;
        onChanged();
        return this;
      }

      private int tiePairMaxBet_ ;
      /**
       * <pre>
       * 和、对子最大下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMaxBet = 7;</code>
       */
      public boolean hasTiePairMaxBet() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * 和、对子最大下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMaxBet = 7;</code>
       */
      public int getTiePairMaxBet() {
        return tiePairMaxBet_;
      }
      /**
       * <pre>
       * 和、对子最大下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMaxBet = 7;</code>
       */
      public Builder setTiePairMaxBet(int value) {
        bitField0_ |= 0x00000020;
        tiePairMaxBet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 和、对子最大下注额
       * </pre>
       *
       * <code>optional uint32 tiePairMaxBet = 7;</code>
       */
      public Builder clearTiePairMaxBet() {
        bitField0_ = (bitField0_ & ~0x00000020);
        tiePairMaxBet_ = 0;
        onChanged();
        return this;
      }

      private int maxRed_ ;
      /**
       * <pre>
       * 限红
       * </pre>
       *
       * <code>optional uint32 maxRed = 8;</code>
       */
      public boolean hasMaxRed() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 限红
       * </pre>
       *
       * <code>optional uint32 maxRed = 8;</code>
       */
      public int getMaxRed() {
        return maxRed_;
      }
      /**
       * <pre>
       * 限红
       * </pre>
       *
       * <code>optional uint32 maxRed = 8;</code>
       */
      public Builder setMaxRed(int value) {
        bitField0_ |= 0x00000040;
        maxRed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 限红
       * </pre>
       *
       * <code>optional uint32 maxRed = 8;</code>
       */
      public Builder clearMaxRed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxRed_ = 0;
        onChanged();
        return this;
      }

      private int drawPercent_ ;
      /**
       * <pre>
       * 抽水百分比
       * </pre>
       *
       * <code>optional uint32 drawPercent = 9;</code>
       */
      public boolean hasDrawPercent() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * 抽水百分比
       * </pre>
       *
       * <code>optional uint32 drawPercent = 9;</code>
       */
      public int getDrawPercent() {
        return drawPercent_;
      }
      /**
       * <pre>
       * 抽水百分比
       * </pre>
       *
       * <code>optional uint32 drawPercent = 9;</code>
       */
      public Builder setDrawPercent(int value) {
        bitField0_ |= 0x00000080;
        drawPercent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 抽水百分比
       * </pre>
       *
       * <code>optional uint32 drawPercent = 9;</code>
       */
      public Builder clearDrawPercent() {
        bitField0_ = (bitField0_ & ~0x00000080);
        drawPercent_ = 0;
        onChanged();
        return this;
      }

      private int betTime_ ;
      /**
       * <pre>
       * 下注时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 betTime = 10;</code>
       */
      public boolean hasBetTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * 下注时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 betTime = 10;</code>
       */
      public int getBetTime() {
        return betTime_;
      }
      /**
       * <pre>
       * 下注时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 betTime = 10;</code>
       */
      public Builder setBetTime(int value) {
        bitField0_ |= 0x00000100;
        betTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下注时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 betTime = 10;</code>
       */
      public Builder clearBetTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        betTime_ = 0;
        onChanged();
        return this;
      }

      private int overTime_ ;
      /**
       * <pre>
       * 开奖后时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 overTime = 11;</code>
       */
      public boolean hasOverTime() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * 开奖后时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 overTime = 11;</code>
       */
      public int getOverTime() {
        return overTime_;
      }
      /**
       * <pre>
       * 开奖后时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 overTime = 11;</code>
       */
      public Builder setOverTime(int value) {
        bitField0_ |= 0x00000200;
        overTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 开奖后时长，以秒为单位
       * </pre>
       *
       * <code>optional uint32 overTime = 11;</code>
       */
      public Builder clearOverTime() {
        bitField0_ = (bitField0_ & ~0x00000200);
        overTime_ = 0;
        onChanged();
        return this;
      }

      private int playerCount_ ;
      /**
       * <pre>
       * 玩家人数
       * </pre>
       *
       * <code>optional uint32 playerCount = 12;</code>
       */
      public boolean hasPlayerCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * 玩家人数
       * </pre>
       *
       * <code>optional uint32 playerCount = 12;</code>
       */
      public int getPlayerCount() {
        return playerCount_;
      }
      /**
       * <pre>
       * 玩家人数
       * </pre>
       *
       * <code>optional uint32 playerCount = 12;</code>
       */
      public Builder setPlayerCount(int value) {
        bitField0_ |= 0x00000400;
        playerCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 玩家人数
       * </pre>
       *
       * <code>optional uint32 playerCount = 12;</code>
       */
      public Builder clearPlayerCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        playerCount_ = 0;
        onChanged();
        return this;
      }

      private int remains_ ;
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 13;</code>
       */
      public boolean hasRemains() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 13;</code>
       */
      public int getRemains() {
        return remains_;
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 13;</code>
       */
      public Builder setRemains(int value) {
        bitField0_ |= 0x00000800;
        remains_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 13;</code>
       */
      public Builder clearRemains() {
        bitField0_ = (bitField0_ & ~0x00000800);
        remains_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object channel_ = "";
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public boolean hasChannel() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public java.lang.String getChannel() {
        java.lang.Object ref = channel_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            channel_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public com.google.protobuf.ByteString
          getChannelBytes() {
        java.lang.Object ref = channel_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          channel_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public Builder setChannel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public Builder clearChannel() {
        bitField0_ = (bitField0_ & ~0x00001000);
        channel_ = getDefaultInstance().getChannel();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 声网频道号
       * </pre>
       *
       * <code>optional string channel = 14;</code>
       */
      public Builder setChannelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        channel_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:room_info)
    }

    // @@protoc_insertion_point(class_scope:room_info)
    private static final protocols.baccarat.common.room_info DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.room_info();
    }

    public static protocols.baccarat.common.room_info getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<room_info>
        PARSER = new com.google.protobuf.AbstractParser<room_info>() {
      public room_info parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new room_info(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<room_info> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<room_info> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.room_info getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface baccarat_resultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:baccarat_result)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    java.util.List<java.lang.Integer> getPlayerHandsList();
    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    int getPlayerHandsCount();
    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    int getPlayerHands(int index);

    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    java.util.List<java.lang.Integer> getBankerhandsList();
    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    int getBankerhandsCount();
    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    int getBankerhands(int index);

    /**
     * <pre>
     * 闲家点数
     * </pre>
     *
     * <code>optional uint32 player2Point = 3;</code>
     */
    boolean hasPlayer2Point();
    /**
     * <pre>
     * 闲家点数
     * </pre>
     *
     * <code>optional uint32 player2Point = 3;</code>
     */
    int getPlayer2Point();

    /**
     * <pre>
     * 庄家点数
     * </pre>
     *
     * <code>optional uint32 banker2Point = 4;</code>
     */
    boolean hasBanker2Point();
    /**
     * <pre>
     * 庄家点数
     * </pre>
     *
     * <code>optional uint32 banker2Point = 4;</code>
     */
    int getBanker2Point();

    /**
     * <pre>
     * 闲家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 player3Point = 5;</code>
     */
    boolean hasPlayer3Point();
    /**
     * <pre>
     * 闲家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 player3Point = 5;</code>
     */
    int getPlayer3Point();

    /**
     * <pre>
     * 庄家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 banker3Point = 6;</code>
     */
    boolean hasBanker3Point();
    /**
     * <pre>
     * 庄家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 banker3Point = 6;</code>
     */
    int getBanker3Point();

    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    java.util.List<java.lang.String>
        getWinTargetsList();
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    int getWinTargetsCount();
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    java.lang.String getWinTargets(int index);
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    com.google.protobuf.ByteString
        getWinTargetsBytes(int index);

    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 8;</code>
     */
    boolean hasRemains();
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 8;</code>
     */
    int getRemains();
  }
  /**
   * Protobuf type {@code baccarat_result}
   */
  public  static final class baccarat_result extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:baccarat_result)
      baccarat_resultOrBuilder {
    // Use baccarat_result.newBuilder() to construct.
    private baccarat_result(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private baccarat_result() {
      playerHands_ = java.util.Collections.emptyList();
      bankerhands_ = java.util.Collections.emptyList();
      player2Point_ = 0;
      banker2Point_ = 0;
      player3Point_ = 0;
      banker3Point_ = 0;
      winTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      remains_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private baccarat_result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                playerHands_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              playerHands_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                playerHands_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerHands_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bankerhands_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              bankerhands_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                bankerhands_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bankerhands_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              player2Point_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              banker2Point_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              player3Point_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              banker3Point_ = input.readSInt32();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                winTargets_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000040;
              }
              winTargets_.add(bs);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              remains_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          playerHands_ = java.util.Collections.unmodifiableList(playerHands_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bankerhands_ = java.util.Collections.unmodifiableList(bankerhands_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          winTargets_ = winTargets_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_baccarat_result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_baccarat_result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.baccarat_result.class, protocols.baccarat.common.baccarat_result.Builder.class);
    }

    private int bitField0_;
    public static final int PLAYERHANDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> playerHands_;
    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getPlayerHandsList() {
      return playerHands_;
    }
    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    public int getPlayerHandsCount() {
      return playerHands_.size();
    }
    /**
     * <pre>
     * 闲家手牌
     * </pre>
     *
     * <code>repeated uint32 playerHands = 1;</code>
     */
    public int getPlayerHands(int index) {
      return playerHands_.get(index);
    }

    public static final int BANKERHANDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> bankerhands_;
    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getBankerhandsList() {
      return bankerhands_;
    }
    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    public int getBankerhandsCount() {
      return bankerhands_.size();
    }
    /**
     * <pre>
     * 庄家手牌
     * </pre>
     *
     * <code>repeated uint32 bankerhands = 2;</code>
     */
    public int getBankerhands(int index) {
      return bankerhands_.get(index);
    }

    public static final int PLAYER2POINT_FIELD_NUMBER = 3;
    private int player2Point_;
    /**
     * <pre>
     * 闲家点数
     * </pre>
     *
     * <code>optional uint32 player2Point = 3;</code>
     */
    public boolean hasPlayer2Point() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 闲家点数
     * </pre>
     *
     * <code>optional uint32 player2Point = 3;</code>
     */
    public int getPlayer2Point() {
      return player2Point_;
    }

    public static final int BANKER2POINT_FIELD_NUMBER = 4;
    private int banker2Point_;
    /**
     * <pre>
     * 庄家点数
     * </pre>
     *
     * <code>optional uint32 banker2Point = 4;</code>
     */
    public boolean hasBanker2Point() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 庄家点数
     * </pre>
     *
     * <code>optional uint32 banker2Point = 4;</code>
     */
    public int getBanker2Point() {
      return banker2Point_;
    }

    public static final int PLAYER3POINT_FIELD_NUMBER = 5;
    private int player3Point_;
    /**
     * <pre>
     * 闲家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 player3Point = 5;</code>
     */
    public boolean hasPlayer3Point() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 闲家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 player3Point = 5;</code>
     */
    public int getPlayer3Point() {
      return player3Point_;
    }

    public static final int BANKER3POINT_FIELD_NUMBER = 6;
    private int banker3Point_;
    /**
     * <pre>
     * 庄家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 banker3Point = 6;</code>
     */
    public boolean hasBanker3Point() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 庄家补牌点数,-1代表没有补牌
     * </pre>
     *
     * <code>optional sint32 banker3Point = 6;</code>
     */
    public int getBanker3Point() {
      return banker3Point_;
    }

    public static final int WIN_TARGETS_FIELD_NUMBER = 7;
    private com.google.protobuf.LazyStringList winTargets_;
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getWinTargetsList() {
      return winTargets_;
    }
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    public int getWinTargetsCount() {
      return winTargets_.size();
    }
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    public java.lang.String getWinTargets(int index) {
      return winTargets_.get(index);
    }
    /**
     * <pre>
     * 赢钱区域
     * </pre>
     *
     * <code>repeated string win_targets = 7;</code>
     */
    public com.google.protobuf.ByteString
        getWinTargetsBytes(int index) {
      return winTargets_.getByteString(index);
    }

    public static final int REMAINS_FIELD_NUMBER = 8;
    private int remains_;
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 8;</code>
     */
    public boolean hasRemains() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 余牌
     * </pre>
     *
     * <code>optional uint32 remains = 8;</code>
     */
    public int getRemains() {
      return remains_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < playerHands_.size(); i++) {
        output.writeUInt32(1, playerHands_.get(i));
      }
      for (int i = 0; i < bankerhands_.size(); i++) {
        output.writeUInt32(2, bankerhands_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(3, player2Point_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, banker2Point_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(5, player3Point_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(6, banker3Point_);
      }
      for (int i = 0; i < winTargets_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, winTargets_.getRaw(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(8, remains_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < playerHands_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(playerHands_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerHandsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bankerhands_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(bankerhands_.get(i));
        }
        size += dataSize;
        size += 1 * getBankerhandsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, player2Point_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, banker2Point_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, player3Point_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, banker3Point_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winTargets_.size(); i++) {
          dataSize += computeStringSizeNoTag(winTargets_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getWinTargetsList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, remains_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.baccarat_result)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.baccarat_result other = (protocols.baccarat.common.baccarat_result) obj;

      boolean result = true;
      result = result && getPlayerHandsList()
          .equals(other.getPlayerHandsList());
      result = result && getBankerhandsList()
          .equals(other.getBankerhandsList());
      result = result && (hasPlayer2Point() == other.hasPlayer2Point());
      if (hasPlayer2Point()) {
        result = result && (getPlayer2Point()
            == other.getPlayer2Point());
      }
      result = result && (hasBanker2Point() == other.hasBanker2Point());
      if (hasBanker2Point()) {
        result = result && (getBanker2Point()
            == other.getBanker2Point());
      }
      result = result && (hasPlayer3Point() == other.hasPlayer3Point());
      if (hasPlayer3Point()) {
        result = result && (getPlayer3Point()
            == other.getPlayer3Point());
      }
      result = result && (hasBanker3Point() == other.hasBanker3Point());
      if (hasBanker3Point()) {
        result = result && (getBanker3Point()
            == other.getBanker3Point());
      }
      result = result && getWinTargetsList()
          .equals(other.getWinTargetsList());
      result = result && (hasRemains() == other.hasRemains());
      if (hasRemains()) {
        result = result && (getRemains()
            == other.getRemains());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPlayerHandsCount() > 0) {
        hash = (37 * hash) + PLAYERHANDS_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerHandsList().hashCode();
      }
      if (getBankerhandsCount() > 0) {
        hash = (37 * hash) + BANKERHANDS_FIELD_NUMBER;
        hash = (53 * hash) + getBankerhandsList().hashCode();
      }
      if (hasPlayer2Point()) {
        hash = (37 * hash) + PLAYER2POINT_FIELD_NUMBER;
        hash = (53 * hash) + getPlayer2Point();
      }
      if (hasBanker2Point()) {
        hash = (37 * hash) + BANKER2POINT_FIELD_NUMBER;
        hash = (53 * hash) + getBanker2Point();
      }
      if (hasPlayer3Point()) {
        hash = (37 * hash) + PLAYER3POINT_FIELD_NUMBER;
        hash = (53 * hash) + getPlayer3Point();
      }
      if (hasBanker3Point()) {
        hash = (37 * hash) + BANKER3POINT_FIELD_NUMBER;
        hash = (53 * hash) + getBanker3Point();
      }
      if (getWinTargetsCount() > 0) {
        hash = (37 * hash) + WIN_TARGETS_FIELD_NUMBER;
        hash = (53 * hash) + getWinTargetsList().hashCode();
      }
      if (hasRemains()) {
        hash = (37 * hash) + REMAINS_FIELD_NUMBER;
        hash = (53 * hash) + getRemains();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.baccarat_result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.baccarat_result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.baccarat_result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.baccarat_result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.baccarat_result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code baccarat_result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:baccarat_result)
        protocols.baccarat.common.baccarat_resultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_baccarat_result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_baccarat_result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.baccarat_result.class, protocols.baccarat.common.baccarat_result.Builder.class);
      }

      // Construct using protocols.baccarat.common.baccarat_result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        playerHands_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerhands_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        player2Point_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        banker2Point_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        player3Point_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        banker3Point_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        winTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        remains_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_baccarat_result_descriptor;
      }

      public protocols.baccarat.common.baccarat_result getDefaultInstanceForType() {
        return protocols.baccarat.common.baccarat_result.getDefaultInstance();
      }

      public protocols.baccarat.common.baccarat_result build() {
        protocols.baccarat.common.baccarat_result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.baccarat_result buildPartial() {
        protocols.baccarat.common.baccarat_result result = new protocols.baccarat.common.baccarat_result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          playerHands_ = java.util.Collections.unmodifiableList(playerHands_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.playerHands_ = playerHands_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          bankerhands_ = java.util.Collections.unmodifiableList(bankerhands_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bankerhands_ = bankerhands_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.player2Point_ = player2Point_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.banker2Point_ = banker2Point_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.player3Point_ = player3Point_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.banker3Point_ = banker3Point_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          winTargets_ = winTargets_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.winTargets_ = winTargets_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.remains_ = remains_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.baccarat_result) {
          return mergeFrom((protocols.baccarat.common.baccarat_result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.baccarat_result other) {
        if (other == protocols.baccarat.common.baccarat_result.getDefaultInstance()) return this;
        if (!other.playerHands_.isEmpty()) {
          if (playerHands_.isEmpty()) {
            playerHands_ = other.playerHands_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePlayerHandsIsMutable();
            playerHands_.addAll(other.playerHands_);
          }
          onChanged();
        }
        if (!other.bankerhands_.isEmpty()) {
          if (bankerhands_.isEmpty()) {
            bankerhands_ = other.bankerhands_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBankerhandsIsMutable();
            bankerhands_.addAll(other.bankerhands_);
          }
          onChanged();
        }
        if (other.hasPlayer2Point()) {
          setPlayer2Point(other.getPlayer2Point());
        }
        if (other.hasBanker2Point()) {
          setBanker2Point(other.getBanker2Point());
        }
        if (other.hasPlayer3Point()) {
          setPlayer3Point(other.getPlayer3Point());
        }
        if (other.hasBanker3Point()) {
          setBanker3Point(other.getBanker3Point());
        }
        if (!other.winTargets_.isEmpty()) {
          if (winTargets_.isEmpty()) {
            winTargets_ = other.winTargets_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureWinTargetsIsMutable();
            winTargets_.addAll(other.winTargets_);
          }
          onChanged();
        }
        if (other.hasRemains()) {
          setRemains(other.getRemains());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.baccarat_result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.baccarat_result) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> playerHands_ = java.util.Collections.emptyList();
      private void ensurePlayerHandsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          playerHands_ = new java.util.ArrayList<java.lang.Integer>(playerHands_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getPlayerHandsList() {
        return java.util.Collections.unmodifiableList(playerHands_);
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public int getPlayerHandsCount() {
        return playerHands_.size();
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public int getPlayerHands(int index) {
        return playerHands_.get(index);
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public Builder setPlayerHands(
          int index, int value) {
        ensurePlayerHandsIsMutable();
        playerHands_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public Builder addPlayerHands(int value) {
        ensurePlayerHandsIsMutable();
        playerHands_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public Builder addAllPlayerHands(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerHandsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, playerHands_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲家手牌
       * </pre>
       *
       * <code>repeated uint32 playerHands = 1;</code>
       */
      public Builder clearPlayerHands() {
        playerHands_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> bankerhands_ = java.util.Collections.emptyList();
      private void ensureBankerhandsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bankerhands_ = new java.util.ArrayList<java.lang.Integer>(bankerhands_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getBankerhandsList() {
        return java.util.Collections.unmodifiableList(bankerhands_);
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public int getBankerhandsCount() {
        return bankerhands_.size();
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public int getBankerhands(int index) {
        return bankerhands_.get(index);
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public Builder setBankerhands(
          int index, int value) {
        ensureBankerhandsIsMutable();
        bankerhands_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public Builder addBankerhands(int value) {
        ensureBankerhandsIsMutable();
        bankerhands_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public Builder addAllBankerhands(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBankerhandsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bankerhands_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家手牌
       * </pre>
       *
       * <code>repeated uint32 bankerhands = 2;</code>
       */
      public Builder clearBankerhands() {
        bankerhands_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private int player2Point_ ;
      /**
       * <pre>
       * 闲家点数
       * </pre>
       *
       * <code>optional uint32 player2Point = 3;</code>
       */
      public boolean hasPlayer2Point() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 闲家点数
       * </pre>
       *
       * <code>optional uint32 player2Point = 3;</code>
       */
      public int getPlayer2Point() {
        return player2Point_;
      }
      /**
       * <pre>
       * 闲家点数
       * </pre>
       *
       * <code>optional uint32 player2Point = 3;</code>
       */
      public Builder setPlayer2Point(int value) {
        bitField0_ |= 0x00000004;
        player2Point_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲家点数
       * </pre>
       *
       * <code>optional uint32 player2Point = 3;</code>
       */
      public Builder clearPlayer2Point() {
        bitField0_ = (bitField0_ & ~0x00000004);
        player2Point_ = 0;
        onChanged();
        return this;
      }

      private int banker2Point_ ;
      /**
       * <pre>
       * 庄家点数
       * </pre>
       *
       * <code>optional uint32 banker2Point = 4;</code>
       */
      public boolean hasBanker2Point() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 庄家点数
       * </pre>
       *
       * <code>optional uint32 banker2Point = 4;</code>
       */
      public int getBanker2Point() {
        return banker2Point_;
      }
      /**
       * <pre>
       * 庄家点数
       * </pre>
       *
       * <code>optional uint32 banker2Point = 4;</code>
       */
      public Builder setBanker2Point(int value) {
        bitField0_ |= 0x00000008;
        banker2Point_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家点数
       * </pre>
       *
       * <code>optional uint32 banker2Point = 4;</code>
       */
      public Builder clearBanker2Point() {
        bitField0_ = (bitField0_ & ~0x00000008);
        banker2Point_ = 0;
        onChanged();
        return this;
      }

      private int player3Point_ ;
      /**
       * <pre>
       * 闲家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 player3Point = 5;</code>
       */
      public boolean hasPlayer3Point() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * 闲家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 player3Point = 5;</code>
       */
      public int getPlayer3Point() {
        return player3Point_;
      }
      /**
       * <pre>
       * 闲家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 player3Point = 5;</code>
       */
      public Builder setPlayer3Point(int value) {
        bitField0_ |= 0x00000010;
        player3Point_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 player3Point = 5;</code>
       */
      public Builder clearPlayer3Point() {
        bitField0_ = (bitField0_ & ~0x00000010);
        player3Point_ = 0;
        onChanged();
        return this;
      }

      private int banker3Point_ ;
      /**
       * <pre>
       * 庄家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 banker3Point = 6;</code>
       */
      public boolean hasBanker3Point() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * 庄家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 banker3Point = 6;</code>
       */
      public int getBanker3Point() {
        return banker3Point_;
      }
      /**
       * <pre>
       * 庄家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 banker3Point = 6;</code>
       */
      public Builder setBanker3Point(int value) {
        bitField0_ |= 0x00000020;
        banker3Point_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄家补牌点数,-1代表没有补牌
       * </pre>
       *
       * <code>optional sint32 banker3Point = 6;</code>
       */
      public Builder clearBanker3Point() {
        bitField0_ = (bitField0_ & ~0x00000020);
        banker3Point_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList winTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureWinTargetsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          winTargets_ = new com.google.protobuf.LazyStringArrayList(winTargets_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getWinTargetsList() {
        return winTargets_.getUnmodifiableView();
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public int getWinTargetsCount() {
        return winTargets_.size();
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public java.lang.String getWinTargets(int index) {
        return winTargets_.get(index);
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public com.google.protobuf.ByteString
          getWinTargetsBytes(int index) {
        return winTargets_.getByteString(index);
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public Builder setWinTargets(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureWinTargetsIsMutable();
        winTargets_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public Builder addWinTargets(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureWinTargetsIsMutable();
        winTargets_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public Builder addAllWinTargets(
          java.lang.Iterable<java.lang.String> values) {
        ensureWinTargetsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, winTargets_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public Builder clearWinTargets() {
        winTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 赢钱区域
       * </pre>
       *
       * <code>repeated string win_targets = 7;</code>
       */
      public Builder addWinTargetsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureWinTargetsIsMutable();
        winTargets_.add(value);
        onChanged();
        return this;
      }

      private int remains_ ;
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 8;</code>
       */
      public boolean hasRemains() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 8;</code>
       */
      public int getRemains() {
        return remains_;
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 8;</code>
       */
      public Builder setRemains(int value) {
        bitField0_ |= 0x00000080;
        remains_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 余牌
       * </pre>
       *
       * <code>optional uint32 remains = 8;</code>
       */
      public Builder clearRemains() {
        bitField0_ = (bitField0_ & ~0x00000080);
        remains_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:baccarat_result)
    }

    // @@protoc_insertion_point(class_scope:baccarat_result)
    private static final protocols.baccarat.common.baccarat_result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.baccarat_result();
    }

    public static protocols.baccarat.common.baccarat_result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<baccarat_result>
        PARSER = new com.google.protobuf.AbstractParser<baccarat_result>() {
      public baccarat_result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new baccarat_result(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<baccarat_result> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<baccarat_result> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.baccarat_result getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface user_infoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:user_info)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 用户id
     * </pre>
     *
     * <code>optional uint32 userId = 1;</code>
     */
    boolean hasUserId();
    /**
     * <pre>
     * 用户id
     * </pre>
     *
     * <code>optional uint32 userId = 1;</code>
     */
    int getUserId();

    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    boolean hasUserName();
    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    java.lang.String getUserName();
    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    /**
     * <pre>
     * 头像
     * </pre>
     *
     * <code>optional uint32 avatar = 3;</code>
     */
    boolean hasAvatar();
    /**
     * <pre>
     * 头像
     * </pre>
     *
     * <code>optional uint32 avatar = 3;</code>
     */
    int getAvatar();

    /**
     * <pre>
     * 金币数
     * </pre>
     *
     * <code>optional uint32 coin = 4;</code>
     */
    boolean hasCoin();
    /**
     * <pre>
     * 金币数
     * </pre>
     *
     * <code>optional uint32 coin = 4;</code>
     */
    int getCoin();

    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>optional uint32 seatId = 5;</code>
     */
    boolean hasSeatId();
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>optional uint32 seatId = 5;</code>
     */
    int getSeatId();

    /**
     * <pre>
     * 是否已被禁言
     * </pre>
     *
     * <code>optional bool silent = 6;</code>
     */
    boolean hasSilent();
    /**
     * <pre>
     * 是否已被禁言
     * </pre>
     *
     * <code>optional bool silent = 6;</code>
     */
    boolean getSilent();

    /**
     * <pre>
     * 是否是大玩家
     * </pre>
     *
     * <code>optional bool bigPlayer = 7;</code>
     */
    boolean hasBigPlayer();
    /**
     * <pre>
     * 是否是大玩家
     * </pre>
     *
     * <code>optional bool bigPlayer = 7;</code>
     */
    boolean getBigPlayer();
  }
  /**
   * Protobuf type {@code user_info}
   */
  public  static final class user_info extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:user_info)
      user_infoOrBuilder {
    // Use user_info.newBuilder() to construct.
    private user_info(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private user_info() {
      userId_ = 0;
      userName_ = "";
      avatar_ = 0;
      coin_ = 0;
      seatId_ = 0;
      silent_ = false;
      bigPlayer_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private user_info(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              userId_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              userName_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              avatar_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              coin_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              seatId_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              silent_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              bigPlayer_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_user_info_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_user_info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.user_info.class, protocols.baccarat.common.user_info.Builder.class);
    }

    private int bitField0_;
    public static final int USERID_FIELD_NUMBER = 1;
    private int userId_;
    /**
     * <pre>
     * 用户id
     * </pre>
     *
     * <code>optional uint32 userId = 1;</code>
     */
    public boolean hasUserId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 用户id
     * </pre>
     *
     * <code>optional uint32 userId = 1;</code>
     */
    public int getUserId() {
      return userId_;
    }

    public static final int USERNAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object userName_;
    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 昵称
     * </pre>
     *
     * <code>optional string userName = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AVATAR_FIELD_NUMBER = 3;
    private int avatar_;
    /**
     * <pre>
     * 头像
     * </pre>
     *
     * <code>optional uint32 avatar = 3;</code>
     */
    public boolean hasAvatar() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 头像
     * </pre>
     *
     * <code>optional uint32 avatar = 3;</code>
     */
    public int getAvatar() {
      return avatar_;
    }

    public static final int COIN_FIELD_NUMBER = 4;
    private int coin_;
    /**
     * <pre>
     * 金币数
     * </pre>
     *
     * <code>optional uint32 coin = 4;</code>
     */
    public boolean hasCoin() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 金币数
     * </pre>
     *
     * <code>optional uint32 coin = 4;</code>
     */
    public int getCoin() {
      return coin_;
    }

    public static final int SEATID_FIELD_NUMBER = 5;
    private int seatId_;
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>optional uint32 seatId = 5;</code>
     */
    public boolean hasSeatId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 座位号
     * </pre>
     *
     * <code>optional uint32 seatId = 5;</code>
     */
    public int getSeatId() {
      return seatId_;
    }

    public static final int SILENT_FIELD_NUMBER = 6;
    private boolean silent_;
    /**
     * <pre>
     * 是否已被禁言
     * </pre>
     *
     * <code>optional bool silent = 6;</code>
     */
    public boolean hasSilent() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 是否已被禁言
     * </pre>
     *
     * <code>optional bool silent = 6;</code>
     */
    public boolean getSilent() {
      return silent_;
    }

    public static final int BIGPLAYER_FIELD_NUMBER = 7;
    private boolean bigPlayer_;
    /**
     * <pre>
     * 是否是大玩家
     * </pre>
     *
     * <code>optional bool bigPlayer = 7;</code>
     */
    public boolean hasBigPlayer() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 是否是大玩家
     * </pre>
     *
     * <code>optional bool bigPlayer = 7;</code>
     */
    public boolean getBigPlayer() {
      return bigPlayer_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, userId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, avatar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, coin_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, seatId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, silent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, bigPlayer_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, userId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, avatar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, coin_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, seatId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, silent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, bigPlayer_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.user_info)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.user_info other = (protocols.baccarat.common.user_info) obj;

      boolean result = true;
      result = result && (hasUserId() == other.hasUserId());
      if (hasUserId()) {
        result = result && (getUserId()
            == other.getUserId());
      }
      result = result && (hasUserName() == other.hasUserName());
      if (hasUserName()) {
        result = result && getUserName()
            .equals(other.getUserName());
      }
      result = result && (hasAvatar() == other.hasAvatar());
      if (hasAvatar()) {
        result = result && (getAvatar()
            == other.getAvatar());
      }
      result = result && (hasCoin() == other.hasCoin());
      if (hasCoin()) {
        result = result && (getCoin()
            == other.getCoin());
      }
      result = result && (hasSeatId() == other.hasSeatId());
      if (hasSeatId()) {
        result = result && (getSeatId()
            == other.getSeatId());
      }
      result = result && (hasSilent() == other.hasSilent());
      if (hasSilent()) {
        result = result && (getSilent()
            == other.getSilent());
      }
      result = result && (hasBigPlayer() == other.hasBigPlayer());
      if (hasBigPlayer()) {
        result = result && (getBigPlayer()
            == other.getBigPlayer());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUserId()) {
        hash = (37 * hash) + USERID_FIELD_NUMBER;
        hash = (53 * hash) + getUserId();
      }
      if (hasUserName()) {
        hash = (37 * hash) + USERNAME_FIELD_NUMBER;
        hash = (53 * hash) + getUserName().hashCode();
      }
      if (hasAvatar()) {
        hash = (37 * hash) + AVATAR_FIELD_NUMBER;
        hash = (53 * hash) + getAvatar();
      }
      if (hasCoin()) {
        hash = (37 * hash) + COIN_FIELD_NUMBER;
        hash = (53 * hash) + getCoin();
      }
      if (hasSeatId()) {
        hash = (37 * hash) + SEATID_FIELD_NUMBER;
        hash = (53 * hash) + getSeatId();
      }
      if (hasSilent()) {
        hash = (37 * hash) + SILENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSilent());
      }
      if (hasBigPlayer()) {
        hash = (37 * hash) + BIGPLAYER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBigPlayer());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.user_info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.user_info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.user_info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.user_info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.user_info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.user_info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.user_info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.user_info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.user_info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.user_info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.user_info prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code user_info}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:user_info)
        protocols.baccarat.common.user_infoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_user_info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_user_info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.user_info.class, protocols.baccarat.common.user_info.Builder.class);
      }

      // Construct using protocols.baccarat.common.user_info.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        userId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        avatar_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        coin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        seatId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        silent_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        bigPlayer_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_user_info_descriptor;
      }

      public protocols.baccarat.common.user_info getDefaultInstanceForType() {
        return protocols.baccarat.common.user_info.getDefaultInstance();
      }

      public protocols.baccarat.common.user_info build() {
        protocols.baccarat.common.user_info result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.user_info buildPartial() {
        protocols.baccarat.common.user_info result = new protocols.baccarat.common.user_info(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.userId_ = userId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.avatar_ = avatar_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.coin_ = coin_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.seatId_ = seatId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.silent_ = silent_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.bigPlayer_ = bigPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.user_info) {
          return mergeFrom((protocols.baccarat.common.user_info)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.user_info other) {
        if (other == protocols.baccarat.common.user_info.getDefaultInstance()) return this;
        if (other.hasUserId()) {
          setUserId(other.getUserId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasAvatar()) {
          setAvatar(other.getAvatar());
        }
        if (other.hasCoin()) {
          setCoin(other.getCoin());
        }
        if (other.hasSeatId()) {
          setSeatId(other.getSeatId());
        }
        if (other.hasSilent()) {
          setSilent(other.getSilent());
        }
        if (other.hasBigPlayer()) {
          setBigPlayer(other.getBigPlayer());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.user_info parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.user_info) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int userId_ ;
      /**
       * <pre>
       * 用户id
       * </pre>
       *
       * <code>optional uint32 userId = 1;</code>
       */
      public boolean hasUserId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 用户id
       * </pre>
       *
       * <code>optional uint32 userId = 1;</code>
       */
      public int getUserId() {
        return userId_;
      }
      /**
       * <pre>
       * 用户id
       * </pre>
       *
       * <code>optional uint32 userId = 1;</code>
       */
      public Builder setUserId(int value) {
        bitField0_ |= 0x00000001;
        userId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 用户id
       * </pre>
       *
       * <code>optional uint32 userId = 1;</code>
       */
      public Builder clearUserId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        userId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object userName_ = "";
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            userName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 昵称
       * </pre>
       *
       * <code>optional string userName = 2;</code>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      private int avatar_ ;
      /**
       * <pre>
       * 头像
       * </pre>
       *
       * <code>optional uint32 avatar = 3;</code>
       */
      public boolean hasAvatar() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * 头像
       * </pre>
       *
       * <code>optional uint32 avatar = 3;</code>
       */
      public int getAvatar() {
        return avatar_;
      }
      /**
       * <pre>
       * 头像
       * </pre>
       *
       * <code>optional uint32 avatar = 3;</code>
       */
      public Builder setAvatar(int value) {
        bitField0_ |= 0x00000004;
        avatar_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 头像
       * </pre>
       *
       * <code>optional uint32 avatar = 3;</code>
       */
      public Builder clearAvatar() {
        bitField0_ = (bitField0_ & ~0x00000004);
        avatar_ = 0;
        onChanged();
        return this;
      }

      private int coin_ ;
      /**
       * <pre>
       * 金币数
       * </pre>
       *
       * <code>optional uint32 coin = 4;</code>
       */
      public boolean hasCoin() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 金币数
       * </pre>
       *
       * <code>optional uint32 coin = 4;</code>
       */
      public int getCoin() {
        return coin_;
      }
      /**
       * <pre>
       * 金币数
       * </pre>
       *
       * <code>optional uint32 coin = 4;</code>
       */
      public Builder setCoin(int value) {
        bitField0_ |= 0x00000008;
        coin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 金币数
       * </pre>
       *
       * <code>optional uint32 coin = 4;</code>
       */
      public Builder clearCoin() {
        bitField0_ = (bitField0_ & ~0x00000008);
        coin_ = 0;
        onChanged();
        return this;
      }

      private int seatId_ ;
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>optional uint32 seatId = 5;</code>
       */
      public boolean hasSeatId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>optional uint32 seatId = 5;</code>
       */
      public int getSeatId() {
        return seatId_;
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>optional uint32 seatId = 5;</code>
       */
      public Builder setSeatId(int value) {
        bitField0_ |= 0x00000010;
        seatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 座位号
       * </pre>
       *
       * <code>optional uint32 seatId = 5;</code>
       */
      public Builder clearSeatId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seatId_ = 0;
        onChanged();
        return this;
      }

      private boolean silent_ ;
      /**
       * <pre>
       * 是否已被禁言
       * </pre>
       *
       * <code>optional bool silent = 6;</code>
       */
      public boolean hasSilent() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * 是否已被禁言
       * </pre>
       *
       * <code>optional bool silent = 6;</code>
       */
      public boolean getSilent() {
        return silent_;
      }
      /**
       * <pre>
       * 是否已被禁言
       * </pre>
       *
       * <code>optional bool silent = 6;</code>
       */
      public Builder setSilent(boolean value) {
        bitField0_ |= 0x00000020;
        silent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否已被禁言
       * </pre>
       *
       * <code>optional bool silent = 6;</code>
       */
      public Builder clearSilent() {
        bitField0_ = (bitField0_ & ~0x00000020);
        silent_ = false;
        onChanged();
        return this;
      }

      private boolean bigPlayer_ ;
      /**
       * <pre>
       * 是否是大玩家
       * </pre>
       *
       * <code>optional bool bigPlayer = 7;</code>
       */
      public boolean hasBigPlayer() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 是否是大玩家
       * </pre>
       *
       * <code>optional bool bigPlayer = 7;</code>
       */
      public boolean getBigPlayer() {
        return bigPlayer_;
      }
      /**
       * <pre>
       * 是否是大玩家
       * </pre>
       *
       * <code>optional bool bigPlayer = 7;</code>
       */
      public Builder setBigPlayer(boolean value) {
        bitField0_ |= 0x00000040;
        bigPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否是大玩家
       * </pre>
       *
       * <code>optional bool bigPlayer = 7;</code>
       */
      public Builder clearBigPlayer() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bigPlayer_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:user_info)
    }

    // @@protoc_insertion_point(class_scope:user_info)
    private static final protocols.baccarat.common.user_info DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.user_info();
    }

    public static protocols.baccarat.common.user_info getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<user_info>
        PARSER = new com.google.protobuf.AbstractParser<user_info>() {
      public user_info parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new user_info(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<user_info> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<user_info> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.user_info getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface betOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    java.lang.String getTarget();
    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    com.google.protobuf.ByteString
        getTargetBytes();

    /**
     * <pre>
     * 下注或获奖金币数
     * </pre>
     *
     * <code>optional uint32 coins = 2;</code>
     */
    boolean hasCoins();
    /**
     * <pre>
     * 下注或获奖金币数
     * </pre>
     *
     * <code>optional uint32 coins = 2;</code>
     */
    int getCoins();
  }
  /**
   * Protobuf type {@code bet}
   */
  public  static final class bet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bet)
      betOrBuilder {
    // Use bet.newBuilder() to construct.
    private bet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private bet() {
      target_ = "";
      coins_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private bet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              target_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              coins_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_bet_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_bet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.bet.class, protocols.baccarat.common.bet.Builder.class);
    }

    private int bitField0_;
    public static final int TARGET_FIELD_NUMBER = 1;
    private volatile java.lang.Object target_;
    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    public boolean hasTarget() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    public java.lang.String getTarget() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          target_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 下注目标或获奖目标，字符串内容见以下beton
     * </pre>
     *
     * <code>optional string target = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTargetBytes() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        target_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COINS_FIELD_NUMBER = 2;
    private int coins_;
    /**
     * <pre>
     * 下注或获奖金币数
     * </pre>
     *
     * <code>optional uint32 coins = 2;</code>
     */
    public boolean hasCoins() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 下注或获奖金币数
     * </pre>
     *
     * <code>optional uint32 coins = 2;</code>
     */
    public int getCoins() {
      return coins_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, target_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, coins_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, target_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, coins_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.bet)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.bet other = (protocols.baccarat.common.bet) obj;

      boolean result = true;
      result = result && (hasTarget() == other.hasTarget());
      if (hasTarget()) {
        result = result && getTarget()
            .equals(other.getTarget());
      }
      result = result && (hasCoins() == other.hasCoins());
      if (hasCoins()) {
        result = result && (getCoins()
            == other.getCoins());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      if (hasCoins()) {
        hash = (37 * hash) + COINS_FIELD_NUMBER;
        hash = (53 * hash) + getCoins();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.bet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.bet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.bet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.bet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.bet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.bet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.bet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.bet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.bet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.bet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.bet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code bet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bet)
        protocols.baccarat.common.betOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_bet_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_bet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.bet.class, protocols.baccarat.common.bet.Builder.class);
      }

      // Construct using protocols.baccarat.common.bet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        target_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        coins_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_bet_descriptor;
      }

      public protocols.baccarat.common.bet getDefaultInstanceForType() {
        return protocols.baccarat.common.bet.getDefaultInstance();
      }

      public protocols.baccarat.common.bet build() {
        protocols.baccarat.common.bet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.bet buildPartial() {
        protocols.baccarat.common.bet result = new protocols.baccarat.common.bet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.target_ = target_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.coins_ = coins_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.bet) {
          return mergeFrom((protocols.baccarat.common.bet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.bet other) {
        if (other == protocols.baccarat.common.bet.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          bitField0_ |= 0x00000001;
          target_ = other.target_;
          onChanged();
        }
        if (other.hasCoins()) {
          setCoins(other.getCoins());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.bet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.bet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object target_ = "";
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public java.lang.String getTarget() {
        java.lang.Object ref = target_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            target_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTargetBytes() {
        java.lang.Object ref = target_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          target_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public Builder setTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public Builder clearTarget() {
        bitField0_ = (bitField0_ & ~0x00000001);
        target_ = getDefaultInstance().getTarget();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下注目标或获奖目标，字符串内容见以下beton
       * </pre>
       *
       * <code>optional string target = 1;</code>
       */
      public Builder setTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        target_ = value;
        onChanged();
        return this;
      }

      private int coins_ ;
      /**
       * <pre>
       * 下注或获奖金币数
       * </pre>
       *
       * <code>optional uint32 coins = 2;</code>
       */
      public boolean hasCoins() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * 下注或获奖金币数
       * </pre>
       *
       * <code>optional uint32 coins = 2;</code>
       */
      public int getCoins() {
        return coins_;
      }
      /**
       * <pre>
       * 下注或获奖金币数
       * </pre>
       *
       * <code>optional uint32 coins = 2;</code>
       */
      public Builder setCoins(int value) {
        bitField0_ |= 0x00000002;
        coins_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下注或获奖金币数
       * </pre>
       *
       * <code>optional uint32 coins = 2;</code>
       */
      public Builder clearCoins() {
        bitField0_ = (bitField0_ & ~0x00000002);
        coins_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bet)
    }

    // @@protoc_insertion_point(class_scope:bet)
    private static final protocols.baccarat.common.bet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.bet();
    }

    public static protocols.baccarat.common.bet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<bet>
        PARSER = new com.google.protobuf.AbstractParser<bet>() {
      public bet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new bet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<bet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<bet> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.bet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface waybillOrBuilder extends
      // @@protoc_insertion_point(interface_extends:waybill)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    java.util.List<protocols.baccarat.common.column> 
        getMainRoadList();
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    protocols.baccarat.common.column getMainRoad(int index);
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    int getMainRoadCount();
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getMainRoadOrBuilderList();
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    protocols.baccarat.common.columnOrBuilder getMainRoadOrBuilder(
        int index);

    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    java.util.List<protocols.baccarat.common.column> 
        getDishRoadList();
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    protocols.baccarat.common.column getDishRoad(int index);
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    int getDishRoadCount();
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getDishRoadOrBuilderList();
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    protocols.baccarat.common.columnOrBuilder getDishRoadOrBuilder(
        int index);

    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    java.util.List<protocols.baccarat.common.column> 
        getBigEyeRoadList();
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    protocols.baccarat.common.column getBigEyeRoad(int index);
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    int getBigEyeRoadCount();
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getBigEyeRoadOrBuilderList();
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    protocols.baccarat.common.columnOrBuilder getBigEyeRoadOrBuilder(
        int index);

    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    java.util.List<protocols.baccarat.common.column> 
        getSmallRoadList();
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    protocols.baccarat.common.column getSmallRoad(int index);
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    int getSmallRoadCount();
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getSmallRoadOrBuilderList();
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    protocols.baccarat.common.columnOrBuilder getSmallRoadOrBuilder(
        int index);

    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    java.util.List<protocols.baccarat.common.column> 
        getRoachRoadList();
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    protocols.baccarat.common.column getRoachRoad(int index);
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    int getRoachRoadCount();
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getRoachRoadOrBuilderList();
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    protocols.baccarat.common.columnOrBuilder getRoachRoadOrBuilder(
        int index);

    /**
     * <pre>
     * 总局数
     * </pre>
     *
     * <code>optional uint32 total = 6;</code>
     */
    boolean hasTotal();
    /**
     * <pre>
     * 总局数
     * </pre>
     *
     * <code>optional uint32 total = 6;</code>
     */
    int getTotal();

    /**
     * <pre>
     * 庄赢局数
     * </pre>
     *
     * <code>optional uint32 bankerWin = 7;</code>
     */
    boolean hasBankerWin();
    /**
     * <pre>
     * 庄赢局数
     * </pre>
     *
     * <code>optional uint32 bankerWin = 7;</code>
     */
    int getBankerWin();

    /**
     * <pre>
     * 闲赢局数
     * </pre>
     *
     * <code>optional uint32 playerWin = 8;</code>
     */
    boolean hasPlayerWin();
    /**
     * <pre>
     * 闲赢局数
     * </pre>
     *
     * <code>optional uint32 playerWin = 8;</code>
     */
    int getPlayerWin();

    /**
     * <pre>
     * 和局数
     * </pre>
     *
     * <code>optional uint32 tie = 9;</code>
     */
    boolean hasTie();
    /**
     * <pre>
     * 和局数
     * </pre>
     *
     * <code>optional uint32 tie = 9;</code>
     */
    int getTie();

    /**
     * <pre>
     * 庄对局数
     * </pre>
     *
     * <code>optional uint32 bankerPair = 10;</code>
     */
    boolean hasBankerPair();
    /**
     * <pre>
     * 庄对局数
     * </pre>
     *
     * <code>optional uint32 bankerPair = 10;</code>
     */
    int getBankerPair();

    /**
     * <pre>
     * 闲对局数
     * </pre>
     *
     * <code>optional uint32 playerPair = 11;</code>
     */
    boolean hasPlayerPair();
    /**
     * <pre>
     * 闲对局数
     * </pre>
     *
     * <code>optional uint32 playerPair = 11;</code>
     */
    int getPlayerPair();

    /**
     * <pre>
     * 天牌局数
     * </pre>
     *
     * <code>optional uint32 sky = 12;</code>
     */
    boolean hasSky();
    /**
     * <pre>
     * 天牌局数
     * </pre>
     *
     * <code>optional uint32 sky = 12;</code>
     */
    int getSky();

    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    boolean hasBanker();
    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    protocols.baccarat.common.ask getBanker();
    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    protocols.baccarat.common.askOrBuilder getBankerOrBuilder();

    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    boolean hasPlayer();
    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    protocols.baccarat.common.ask getPlayer();
    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    protocols.baccarat.common.askOrBuilder getPlayerOrBuilder();
  }
  /**
   * Protobuf type {@code waybill}
   */
  public  static final class waybill extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:waybill)
      waybillOrBuilder {
    // Use waybill.newBuilder() to construct.
    private waybill(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private waybill() {
      mainRoad_ = java.util.Collections.emptyList();
      dishRoad_ = java.util.Collections.emptyList();
      bigEyeRoad_ = java.util.Collections.emptyList();
      smallRoad_ = java.util.Collections.emptyList();
      roachRoad_ = java.util.Collections.emptyList();
      total_ = 0;
      bankerWin_ = 0;
      playerWin_ = 0;
      tie_ = 0;
      bankerPair_ = 0;
      playerPair_ = 0;
      sky_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private waybill(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                mainRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>();
                mutable_bitField0_ |= 0x00000001;
              }
              mainRoad_.add(
                  input.readMessage(protocols.baccarat.common.column.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                dishRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>();
                mutable_bitField0_ |= 0x00000002;
              }
              dishRoad_.add(
                  input.readMessage(protocols.baccarat.common.column.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                bigEyeRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>();
                mutable_bitField0_ |= 0x00000004;
              }
              bigEyeRoad_.add(
                  input.readMessage(protocols.baccarat.common.column.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                smallRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>();
                mutable_bitField0_ |= 0x00000008;
              }
              smallRoad_.add(
                  input.readMessage(protocols.baccarat.common.column.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                roachRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>();
                mutable_bitField0_ |= 0x00000010;
              }
              roachRoad_.add(
                  input.readMessage(protocols.baccarat.common.column.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000001;
              total_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000002;
              bankerWin_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000004;
              playerWin_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              tie_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000010;
              bankerPair_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000020;
              playerPair_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000040;
              sky_ = input.readUInt32();
              break;
            }
            case 106: {
              protocols.baccarat.common.ask.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = banker_.toBuilder();
              }
              banker_ = input.readMessage(protocols.baccarat.common.ask.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(banker_);
                banker_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 114: {
              protocols.baccarat.common.ask.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = player_.toBuilder();
              }
              player_ = input.readMessage(protocols.baccarat.common.ask.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(player_);
                player_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          mainRoad_ = java.util.Collections.unmodifiableList(mainRoad_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          dishRoad_ = java.util.Collections.unmodifiableList(dishRoad_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          bigEyeRoad_ = java.util.Collections.unmodifiableList(bigEyeRoad_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          smallRoad_ = java.util.Collections.unmodifiableList(smallRoad_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          roachRoad_ = java.util.Collections.unmodifiableList(roachRoad_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_waybill_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_waybill_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.waybill.class, protocols.baccarat.common.waybill.Builder.class);
    }

    private int bitField0_;
    public static final int MAINROAD_FIELD_NUMBER = 1;
    private java.util.List<protocols.baccarat.common.column> mainRoad_;
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    public java.util.List<protocols.baccarat.common.column> getMainRoadList() {
      return mainRoad_;
    }
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getMainRoadOrBuilderList() {
      return mainRoad_;
    }
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    public int getMainRoadCount() {
      return mainRoad_.size();
    }
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    public protocols.baccarat.common.column getMainRoad(int index) {
      return mainRoad_.get(index);
    }
    /**
     * <pre>
     * 路单大路
     * </pre>
     *
     * <code>repeated .column mainRoad = 1;</code>
     */
    public protocols.baccarat.common.columnOrBuilder getMainRoadOrBuilder(
        int index) {
      return mainRoad_.get(index);
    }

    public static final int DISHROAD_FIELD_NUMBER = 2;
    private java.util.List<protocols.baccarat.common.column> dishRoad_;
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    public java.util.List<protocols.baccarat.common.column> getDishRoadList() {
      return dishRoad_;
    }
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getDishRoadOrBuilderList() {
      return dishRoad_;
    }
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    public int getDishRoadCount() {
      return dishRoad_.size();
    }
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    public protocols.baccarat.common.column getDishRoad(int index) {
      return dishRoad_.get(index);
    }
    /**
     * <pre>
     * 路单珠盘路
     * </pre>
     *
     * <code>repeated .column dishRoad = 2;</code>
     */
    public protocols.baccarat.common.columnOrBuilder getDishRoadOrBuilder(
        int index) {
      return dishRoad_.get(index);
    }

    public static final int BIGEYEROAD_FIELD_NUMBER = 3;
    private java.util.List<protocols.baccarat.common.column> bigEyeRoad_;
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    public java.util.List<protocols.baccarat.common.column> getBigEyeRoadList() {
      return bigEyeRoad_;
    }
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getBigEyeRoadOrBuilderList() {
      return bigEyeRoad_;
    }
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    public int getBigEyeRoadCount() {
      return bigEyeRoad_.size();
    }
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    public protocols.baccarat.common.column getBigEyeRoad(int index) {
      return bigEyeRoad_.get(index);
    }
    /**
     * <pre>
     * 路单大眼仔
     * </pre>
     *
     * <code>repeated .column bigEyeRoad = 3;</code>
     */
    public protocols.baccarat.common.columnOrBuilder getBigEyeRoadOrBuilder(
        int index) {
      return bigEyeRoad_.get(index);
    }

    public static final int SMALLROAD_FIELD_NUMBER = 4;
    private java.util.List<protocols.baccarat.common.column> smallRoad_;
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    public java.util.List<protocols.baccarat.common.column> getSmallRoadList() {
      return smallRoad_;
    }
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getSmallRoadOrBuilderList() {
      return smallRoad_;
    }
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    public int getSmallRoadCount() {
      return smallRoad_.size();
    }
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    public protocols.baccarat.common.column getSmallRoad(int index) {
      return smallRoad_.get(index);
    }
    /**
     * <pre>
     * 路单小路
     * </pre>
     *
     * <code>repeated .column smallRoad = 4;</code>
     */
    public protocols.baccarat.common.columnOrBuilder getSmallRoadOrBuilder(
        int index) {
      return smallRoad_.get(index);
    }

    public static final int ROACHROAD_FIELD_NUMBER = 5;
    private java.util.List<protocols.baccarat.common.column> roachRoad_;
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    public java.util.List<protocols.baccarat.common.column> getRoachRoadList() {
      return roachRoad_;
    }
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
        getRoachRoadOrBuilderList() {
      return roachRoad_;
    }
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    public int getRoachRoadCount() {
      return roachRoad_.size();
    }
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    public protocols.baccarat.common.column getRoachRoad(int index) {
      return roachRoad_.get(index);
    }
    /**
     * <pre>
     * 路单蟑螂路
     * </pre>
     *
     * <code>repeated .column roachRoad = 5;</code>
     */
    public protocols.baccarat.common.columnOrBuilder getRoachRoadOrBuilder(
        int index) {
      return roachRoad_.get(index);
    }

    public static final int TOTAL_FIELD_NUMBER = 6;
    private int total_;
    /**
     * <pre>
     * 总局数
     * </pre>
     *
     * <code>optional uint32 total = 6;</code>
     */
    public boolean hasTotal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 总局数
     * </pre>
     *
     * <code>optional uint32 total = 6;</code>
     */
    public int getTotal() {
      return total_;
    }

    public static final int BANKERWIN_FIELD_NUMBER = 7;
    private int bankerWin_;
    /**
     * <pre>
     * 庄赢局数
     * </pre>
     *
     * <code>optional uint32 bankerWin = 7;</code>
     */
    public boolean hasBankerWin() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 庄赢局数
     * </pre>
     *
     * <code>optional uint32 bankerWin = 7;</code>
     */
    public int getBankerWin() {
      return bankerWin_;
    }

    public static final int PLAYERWIN_FIELD_NUMBER = 8;
    private int playerWin_;
    /**
     * <pre>
     * 闲赢局数
     * </pre>
     *
     * <code>optional uint32 playerWin = 8;</code>
     */
    public boolean hasPlayerWin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 闲赢局数
     * </pre>
     *
     * <code>optional uint32 playerWin = 8;</code>
     */
    public int getPlayerWin() {
      return playerWin_;
    }

    public static final int TIE_FIELD_NUMBER = 9;
    private int tie_;
    /**
     * <pre>
     * 和局数
     * </pre>
     *
     * <code>optional uint32 tie = 9;</code>
     */
    public boolean hasTie() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 和局数
     * </pre>
     *
     * <code>optional uint32 tie = 9;</code>
     */
    public int getTie() {
      return tie_;
    }

    public static final int BANKERPAIR_FIELD_NUMBER = 10;
    private int bankerPair_;
    /**
     * <pre>
     * 庄对局数
     * </pre>
     *
     * <code>optional uint32 bankerPair = 10;</code>
     */
    public boolean hasBankerPair() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 庄对局数
     * </pre>
     *
     * <code>optional uint32 bankerPair = 10;</code>
     */
    public int getBankerPair() {
      return bankerPair_;
    }

    public static final int PLAYERPAIR_FIELD_NUMBER = 11;
    private int playerPair_;
    /**
     * <pre>
     * 闲对局数
     * </pre>
     *
     * <code>optional uint32 playerPair = 11;</code>
     */
    public boolean hasPlayerPair() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 闲对局数
     * </pre>
     *
     * <code>optional uint32 playerPair = 11;</code>
     */
    public int getPlayerPair() {
      return playerPair_;
    }

    public static final int SKY_FIELD_NUMBER = 12;
    private int sky_;
    /**
     * <pre>
     * 天牌局数
     * </pre>
     *
     * <code>optional uint32 sky = 12;</code>
     */
    public boolean hasSky() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 天牌局数
     * </pre>
     *
     * <code>optional uint32 sky = 12;</code>
     */
    public int getSky() {
      return sky_;
    }

    public static final int BANKER_FIELD_NUMBER = 13;
    private protocols.baccarat.common.ask banker_;
    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    public boolean hasBanker() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    public protocols.baccarat.common.ask getBanker() {
      return banker_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : banker_;
    }
    /**
     * <pre>
     * 庄问路
     * </pre>
     *
     * <code>optional .ask banker = 13;</code>
     */
    public protocols.baccarat.common.askOrBuilder getBankerOrBuilder() {
      return banker_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : banker_;
    }

    public static final int PLAYER_FIELD_NUMBER = 14;
    private protocols.baccarat.common.ask player_;
    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    public boolean hasPlayer() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    public protocols.baccarat.common.ask getPlayer() {
      return player_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : player_;
    }
    /**
     * <pre>
     * 闲问路
     * </pre>
     *
     * <code>optional .ask player = 14;</code>
     */
    public protocols.baccarat.common.askOrBuilder getPlayerOrBuilder() {
      return player_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : player_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < mainRoad_.size(); i++) {
        output.writeMessage(1, mainRoad_.get(i));
      }
      for (int i = 0; i < dishRoad_.size(); i++) {
        output.writeMessage(2, dishRoad_.get(i));
      }
      for (int i = 0; i < bigEyeRoad_.size(); i++) {
        output.writeMessage(3, bigEyeRoad_.get(i));
      }
      for (int i = 0; i < smallRoad_.size(); i++) {
        output.writeMessage(4, smallRoad_.get(i));
      }
      for (int i = 0; i < roachRoad_.size(); i++) {
        output.writeMessage(5, roachRoad_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(6, total_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(7, bankerWin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(8, playerWin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(9, tie_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(10, bankerPair_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(11, playerPair_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(12, sky_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(13, getBanker());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(14, getPlayer());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < mainRoad_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, mainRoad_.get(i));
      }
      for (int i = 0; i < dishRoad_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dishRoad_.get(i));
      }
      for (int i = 0; i < bigEyeRoad_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, bigEyeRoad_.get(i));
      }
      for (int i = 0; i < smallRoad_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, smallRoad_.get(i));
      }
      for (int i = 0; i < roachRoad_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roachRoad_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, total_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, bankerWin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, playerWin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, tie_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, bankerPair_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, playerPair_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, sky_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getBanker());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getPlayer());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.waybill)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.waybill other = (protocols.baccarat.common.waybill) obj;

      boolean result = true;
      result = result && getMainRoadList()
          .equals(other.getMainRoadList());
      result = result && getDishRoadList()
          .equals(other.getDishRoadList());
      result = result && getBigEyeRoadList()
          .equals(other.getBigEyeRoadList());
      result = result && getSmallRoadList()
          .equals(other.getSmallRoadList());
      result = result && getRoachRoadList()
          .equals(other.getRoachRoadList());
      result = result && (hasTotal() == other.hasTotal());
      if (hasTotal()) {
        result = result && (getTotal()
            == other.getTotal());
      }
      result = result && (hasBankerWin() == other.hasBankerWin());
      if (hasBankerWin()) {
        result = result && (getBankerWin()
            == other.getBankerWin());
      }
      result = result && (hasPlayerWin() == other.hasPlayerWin());
      if (hasPlayerWin()) {
        result = result && (getPlayerWin()
            == other.getPlayerWin());
      }
      result = result && (hasTie() == other.hasTie());
      if (hasTie()) {
        result = result && (getTie()
            == other.getTie());
      }
      result = result && (hasBankerPair() == other.hasBankerPair());
      if (hasBankerPair()) {
        result = result && (getBankerPair()
            == other.getBankerPair());
      }
      result = result && (hasPlayerPair() == other.hasPlayerPair());
      if (hasPlayerPair()) {
        result = result && (getPlayerPair()
            == other.getPlayerPair());
      }
      result = result && (hasSky() == other.hasSky());
      if (hasSky()) {
        result = result && (getSky()
            == other.getSky());
      }
      result = result && (hasBanker() == other.hasBanker());
      if (hasBanker()) {
        result = result && getBanker()
            .equals(other.getBanker());
      }
      result = result && (hasPlayer() == other.hasPlayer());
      if (hasPlayer()) {
        result = result && getPlayer()
            .equals(other.getPlayer());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMainRoadCount() > 0) {
        hash = (37 * hash) + MAINROAD_FIELD_NUMBER;
        hash = (53 * hash) + getMainRoadList().hashCode();
      }
      if (getDishRoadCount() > 0) {
        hash = (37 * hash) + DISHROAD_FIELD_NUMBER;
        hash = (53 * hash) + getDishRoadList().hashCode();
      }
      if (getBigEyeRoadCount() > 0) {
        hash = (37 * hash) + BIGEYEROAD_FIELD_NUMBER;
        hash = (53 * hash) + getBigEyeRoadList().hashCode();
      }
      if (getSmallRoadCount() > 0) {
        hash = (37 * hash) + SMALLROAD_FIELD_NUMBER;
        hash = (53 * hash) + getSmallRoadList().hashCode();
      }
      if (getRoachRoadCount() > 0) {
        hash = (37 * hash) + ROACHROAD_FIELD_NUMBER;
        hash = (53 * hash) + getRoachRoadList().hashCode();
      }
      if (hasTotal()) {
        hash = (37 * hash) + TOTAL_FIELD_NUMBER;
        hash = (53 * hash) + getTotal();
      }
      if (hasBankerWin()) {
        hash = (37 * hash) + BANKERWIN_FIELD_NUMBER;
        hash = (53 * hash) + getBankerWin();
      }
      if (hasPlayerWin()) {
        hash = (37 * hash) + PLAYERWIN_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerWin();
      }
      if (hasTie()) {
        hash = (37 * hash) + TIE_FIELD_NUMBER;
        hash = (53 * hash) + getTie();
      }
      if (hasBankerPair()) {
        hash = (37 * hash) + BANKERPAIR_FIELD_NUMBER;
        hash = (53 * hash) + getBankerPair();
      }
      if (hasPlayerPair()) {
        hash = (37 * hash) + PLAYERPAIR_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerPair();
      }
      if (hasSky()) {
        hash = (37 * hash) + SKY_FIELD_NUMBER;
        hash = (53 * hash) + getSky();
      }
      if (hasBanker()) {
        hash = (37 * hash) + BANKER_FIELD_NUMBER;
        hash = (53 * hash) + getBanker().hashCode();
      }
      if (hasPlayer()) {
        hash = (37 * hash) + PLAYER_FIELD_NUMBER;
        hash = (53 * hash) + getPlayer().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.waybill parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.waybill parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.waybill parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.waybill parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.waybill parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.waybill parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.waybill parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.waybill parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.waybill parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.waybill parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.waybill prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code waybill}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:waybill)
        protocols.baccarat.common.waybillOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_waybill_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_waybill_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.waybill.class, protocols.baccarat.common.waybill.Builder.class);
      }

      // Construct using protocols.baccarat.common.waybill.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMainRoadFieldBuilder();
          getDishRoadFieldBuilder();
          getBigEyeRoadFieldBuilder();
          getSmallRoadFieldBuilder();
          getRoachRoadFieldBuilder();
          getBankerFieldBuilder();
          getPlayerFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (mainRoadBuilder_ == null) {
          mainRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          mainRoadBuilder_.clear();
        }
        if (dishRoadBuilder_ == null) {
          dishRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          dishRoadBuilder_.clear();
        }
        if (bigEyeRoadBuilder_ == null) {
          bigEyeRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          bigEyeRoadBuilder_.clear();
        }
        if (smallRoadBuilder_ == null) {
          smallRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          smallRoadBuilder_.clear();
        }
        if (roachRoadBuilder_ == null) {
          roachRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          roachRoadBuilder_.clear();
        }
        total_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerWin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        playerWin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        tie_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        playerPair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        sky_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        if (bankerBuilder_ == null) {
          banker_ = null;
        } else {
          bankerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (playerBuilder_ == null) {
          player_ = null;
        } else {
          playerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_waybill_descriptor;
      }

      public protocols.baccarat.common.waybill getDefaultInstanceForType() {
        return protocols.baccarat.common.waybill.getDefaultInstance();
      }

      public protocols.baccarat.common.waybill build() {
        protocols.baccarat.common.waybill result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.waybill buildPartial() {
        protocols.baccarat.common.waybill result = new protocols.baccarat.common.waybill(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (mainRoadBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            mainRoad_ = java.util.Collections.unmodifiableList(mainRoad_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.mainRoad_ = mainRoad_;
        } else {
          result.mainRoad_ = mainRoadBuilder_.build();
        }
        if (dishRoadBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            dishRoad_ = java.util.Collections.unmodifiableList(dishRoad_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dishRoad_ = dishRoad_;
        } else {
          result.dishRoad_ = dishRoadBuilder_.build();
        }
        if (bigEyeRoadBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            bigEyeRoad_ = java.util.Collections.unmodifiableList(bigEyeRoad_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.bigEyeRoad_ = bigEyeRoad_;
        } else {
          result.bigEyeRoad_ = bigEyeRoadBuilder_.build();
        }
        if (smallRoadBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            smallRoad_ = java.util.Collections.unmodifiableList(smallRoad_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.smallRoad_ = smallRoad_;
        } else {
          result.smallRoad_ = smallRoadBuilder_.build();
        }
        if (roachRoadBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            roachRoad_ = java.util.Collections.unmodifiableList(roachRoad_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.roachRoad_ = roachRoad_;
        } else {
          result.roachRoad_ = roachRoadBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000001;
        }
        result.total_ = total_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerWin_ = bankerWin_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000004;
        }
        result.playerWin_ = playerWin_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tie_ = tie_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPair_ = bankerPair_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000020;
        }
        result.playerPair_ = playerPair_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sky_ = sky_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (bankerBuilder_ == null) {
          result.banker_ = banker_;
        } else {
          result.banker_ = bankerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (playerBuilder_ == null) {
          result.player_ = player_;
        } else {
          result.player_ = playerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.waybill) {
          return mergeFrom((protocols.baccarat.common.waybill)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.waybill other) {
        if (other == protocols.baccarat.common.waybill.getDefaultInstance()) return this;
        if (mainRoadBuilder_ == null) {
          if (!other.mainRoad_.isEmpty()) {
            if (mainRoad_.isEmpty()) {
              mainRoad_ = other.mainRoad_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMainRoadIsMutable();
              mainRoad_.addAll(other.mainRoad_);
            }
            onChanged();
          }
        } else {
          if (!other.mainRoad_.isEmpty()) {
            if (mainRoadBuilder_.isEmpty()) {
              mainRoadBuilder_.dispose();
              mainRoadBuilder_ = null;
              mainRoad_ = other.mainRoad_;
              bitField0_ = (bitField0_ & ~0x00000001);
              mainRoadBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMainRoadFieldBuilder() : null;
            } else {
              mainRoadBuilder_.addAllMessages(other.mainRoad_);
            }
          }
        }
        if (dishRoadBuilder_ == null) {
          if (!other.dishRoad_.isEmpty()) {
            if (dishRoad_.isEmpty()) {
              dishRoad_ = other.dishRoad_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDishRoadIsMutable();
              dishRoad_.addAll(other.dishRoad_);
            }
            onChanged();
          }
        } else {
          if (!other.dishRoad_.isEmpty()) {
            if (dishRoadBuilder_.isEmpty()) {
              dishRoadBuilder_.dispose();
              dishRoadBuilder_ = null;
              dishRoad_ = other.dishRoad_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dishRoadBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDishRoadFieldBuilder() : null;
            } else {
              dishRoadBuilder_.addAllMessages(other.dishRoad_);
            }
          }
        }
        if (bigEyeRoadBuilder_ == null) {
          if (!other.bigEyeRoad_.isEmpty()) {
            if (bigEyeRoad_.isEmpty()) {
              bigEyeRoad_ = other.bigEyeRoad_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureBigEyeRoadIsMutable();
              bigEyeRoad_.addAll(other.bigEyeRoad_);
            }
            onChanged();
          }
        } else {
          if (!other.bigEyeRoad_.isEmpty()) {
            if (bigEyeRoadBuilder_.isEmpty()) {
              bigEyeRoadBuilder_.dispose();
              bigEyeRoadBuilder_ = null;
              bigEyeRoad_ = other.bigEyeRoad_;
              bitField0_ = (bitField0_ & ~0x00000004);
              bigEyeRoadBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBigEyeRoadFieldBuilder() : null;
            } else {
              bigEyeRoadBuilder_.addAllMessages(other.bigEyeRoad_);
            }
          }
        }
        if (smallRoadBuilder_ == null) {
          if (!other.smallRoad_.isEmpty()) {
            if (smallRoad_.isEmpty()) {
              smallRoad_ = other.smallRoad_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSmallRoadIsMutable();
              smallRoad_.addAll(other.smallRoad_);
            }
            onChanged();
          }
        } else {
          if (!other.smallRoad_.isEmpty()) {
            if (smallRoadBuilder_.isEmpty()) {
              smallRoadBuilder_.dispose();
              smallRoadBuilder_ = null;
              smallRoad_ = other.smallRoad_;
              bitField0_ = (bitField0_ & ~0x00000008);
              smallRoadBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSmallRoadFieldBuilder() : null;
            } else {
              smallRoadBuilder_.addAllMessages(other.smallRoad_);
            }
          }
        }
        if (roachRoadBuilder_ == null) {
          if (!other.roachRoad_.isEmpty()) {
            if (roachRoad_.isEmpty()) {
              roachRoad_ = other.roachRoad_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureRoachRoadIsMutable();
              roachRoad_.addAll(other.roachRoad_);
            }
            onChanged();
          }
        } else {
          if (!other.roachRoad_.isEmpty()) {
            if (roachRoadBuilder_.isEmpty()) {
              roachRoadBuilder_.dispose();
              roachRoadBuilder_ = null;
              roachRoad_ = other.roachRoad_;
              bitField0_ = (bitField0_ & ~0x00000010);
              roachRoadBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRoachRoadFieldBuilder() : null;
            } else {
              roachRoadBuilder_.addAllMessages(other.roachRoad_);
            }
          }
        }
        if (other.hasTotal()) {
          setTotal(other.getTotal());
        }
        if (other.hasBankerWin()) {
          setBankerWin(other.getBankerWin());
        }
        if (other.hasPlayerWin()) {
          setPlayerWin(other.getPlayerWin());
        }
        if (other.hasTie()) {
          setTie(other.getTie());
        }
        if (other.hasBankerPair()) {
          setBankerPair(other.getBankerPair());
        }
        if (other.hasPlayerPair()) {
          setPlayerPair(other.getPlayerPair());
        }
        if (other.hasSky()) {
          setSky(other.getSky());
        }
        if (other.hasBanker()) {
          mergeBanker(other.getBanker());
        }
        if (other.hasPlayer()) {
          mergePlayer(other.getPlayer());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.waybill parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.waybill) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<protocols.baccarat.common.column> mainRoad_ =
        java.util.Collections.emptyList();
      private void ensureMainRoadIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          mainRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>(mainRoad_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> mainRoadBuilder_;

      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public java.util.List<protocols.baccarat.common.column> getMainRoadList() {
        if (mainRoadBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mainRoad_);
        } else {
          return mainRoadBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public int getMainRoadCount() {
        if (mainRoadBuilder_ == null) {
          return mainRoad_.size();
        } else {
          return mainRoadBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public protocols.baccarat.common.column getMainRoad(int index) {
        if (mainRoadBuilder_ == null) {
          return mainRoad_.get(index);
        } else {
          return mainRoadBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder setMainRoad(
          int index, protocols.baccarat.common.column value) {
        if (mainRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainRoadIsMutable();
          mainRoad_.set(index, value);
          onChanged();
        } else {
          mainRoadBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder setMainRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (mainRoadBuilder_ == null) {
          ensureMainRoadIsMutable();
          mainRoad_.set(index, builderForValue.build());
          onChanged();
        } else {
          mainRoadBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder addMainRoad(protocols.baccarat.common.column value) {
        if (mainRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainRoadIsMutable();
          mainRoad_.add(value);
          onChanged();
        } else {
          mainRoadBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder addMainRoad(
          int index, protocols.baccarat.common.column value) {
        if (mainRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainRoadIsMutable();
          mainRoad_.add(index, value);
          onChanged();
        } else {
          mainRoadBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder addMainRoad(
          protocols.baccarat.common.column.Builder builderForValue) {
        if (mainRoadBuilder_ == null) {
          ensureMainRoadIsMutable();
          mainRoad_.add(builderForValue.build());
          onChanged();
        } else {
          mainRoadBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder addMainRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (mainRoadBuilder_ == null) {
          ensureMainRoadIsMutable();
          mainRoad_.add(index, builderForValue.build());
          onChanged();
        } else {
          mainRoadBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder addAllMainRoad(
          java.lang.Iterable<? extends protocols.baccarat.common.column> values) {
        if (mainRoadBuilder_ == null) {
          ensureMainRoadIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, mainRoad_);
          onChanged();
        } else {
          mainRoadBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder clearMainRoad() {
        if (mainRoadBuilder_ == null) {
          mainRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          mainRoadBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public Builder removeMainRoad(int index) {
        if (mainRoadBuilder_ == null) {
          ensureMainRoadIsMutable();
          mainRoad_.remove(index);
          onChanged();
        } else {
          mainRoadBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public protocols.baccarat.common.column.Builder getMainRoadBuilder(
          int index) {
        return getMainRoadFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public protocols.baccarat.common.columnOrBuilder getMainRoadOrBuilder(
          int index) {
        if (mainRoadBuilder_ == null) {
          return mainRoad_.get(index);  } else {
          return mainRoadBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
           getMainRoadOrBuilderList() {
        if (mainRoadBuilder_ != null) {
          return mainRoadBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mainRoad_);
        }
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public protocols.baccarat.common.column.Builder addMainRoadBuilder() {
        return getMainRoadFieldBuilder().addBuilder(
            protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public protocols.baccarat.common.column.Builder addMainRoadBuilder(
          int index) {
        return getMainRoadFieldBuilder().addBuilder(
            index, protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单大路
       * </pre>
       *
       * <code>repeated .column mainRoad = 1;</code>
       */
      public java.util.List<protocols.baccarat.common.column.Builder> 
           getMainRoadBuilderList() {
        return getMainRoadFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> 
          getMainRoadFieldBuilder() {
        if (mainRoadBuilder_ == null) {
          mainRoadBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder>(
                  mainRoad_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          mainRoad_ = null;
        }
        return mainRoadBuilder_;
      }

      private java.util.List<protocols.baccarat.common.column> dishRoad_ =
        java.util.Collections.emptyList();
      private void ensureDishRoadIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          dishRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>(dishRoad_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> dishRoadBuilder_;

      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public java.util.List<protocols.baccarat.common.column> getDishRoadList() {
        if (dishRoadBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dishRoad_);
        } else {
          return dishRoadBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public int getDishRoadCount() {
        if (dishRoadBuilder_ == null) {
          return dishRoad_.size();
        } else {
          return dishRoadBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public protocols.baccarat.common.column getDishRoad(int index) {
        if (dishRoadBuilder_ == null) {
          return dishRoad_.get(index);
        } else {
          return dishRoadBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder setDishRoad(
          int index, protocols.baccarat.common.column value) {
        if (dishRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDishRoadIsMutable();
          dishRoad_.set(index, value);
          onChanged();
        } else {
          dishRoadBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder setDishRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (dishRoadBuilder_ == null) {
          ensureDishRoadIsMutable();
          dishRoad_.set(index, builderForValue.build());
          onChanged();
        } else {
          dishRoadBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder addDishRoad(protocols.baccarat.common.column value) {
        if (dishRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDishRoadIsMutable();
          dishRoad_.add(value);
          onChanged();
        } else {
          dishRoadBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder addDishRoad(
          int index, protocols.baccarat.common.column value) {
        if (dishRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDishRoadIsMutable();
          dishRoad_.add(index, value);
          onChanged();
        } else {
          dishRoadBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder addDishRoad(
          protocols.baccarat.common.column.Builder builderForValue) {
        if (dishRoadBuilder_ == null) {
          ensureDishRoadIsMutable();
          dishRoad_.add(builderForValue.build());
          onChanged();
        } else {
          dishRoadBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder addDishRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (dishRoadBuilder_ == null) {
          ensureDishRoadIsMutable();
          dishRoad_.add(index, builderForValue.build());
          onChanged();
        } else {
          dishRoadBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder addAllDishRoad(
          java.lang.Iterable<? extends protocols.baccarat.common.column> values) {
        if (dishRoadBuilder_ == null) {
          ensureDishRoadIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dishRoad_);
          onChanged();
        } else {
          dishRoadBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder clearDishRoad() {
        if (dishRoadBuilder_ == null) {
          dishRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dishRoadBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public Builder removeDishRoad(int index) {
        if (dishRoadBuilder_ == null) {
          ensureDishRoadIsMutable();
          dishRoad_.remove(index);
          onChanged();
        } else {
          dishRoadBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public protocols.baccarat.common.column.Builder getDishRoadBuilder(
          int index) {
        return getDishRoadFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public protocols.baccarat.common.columnOrBuilder getDishRoadOrBuilder(
          int index) {
        if (dishRoadBuilder_ == null) {
          return dishRoad_.get(index);  } else {
          return dishRoadBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
           getDishRoadOrBuilderList() {
        if (dishRoadBuilder_ != null) {
          return dishRoadBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dishRoad_);
        }
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public protocols.baccarat.common.column.Builder addDishRoadBuilder() {
        return getDishRoadFieldBuilder().addBuilder(
            protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public protocols.baccarat.common.column.Builder addDishRoadBuilder(
          int index) {
        return getDishRoadFieldBuilder().addBuilder(
            index, protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单珠盘路
       * </pre>
       *
       * <code>repeated .column dishRoad = 2;</code>
       */
      public java.util.List<protocols.baccarat.common.column.Builder> 
           getDishRoadBuilderList() {
        return getDishRoadFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> 
          getDishRoadFieldBuilder() {
        if (dishRoadBuilder_ == null) {
          dishRoadBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder>(
                  dishRoad_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          dishRoad_ = null;
        }
        return dishRoadBuilder_;
      }

      private java.util.List<protocols.baccarat.common.column> bigEyeRoad_ =
        java.util.Collections.emptyList();
      private void ensureBigEyeRoadIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          bigEyeRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>(bigEyeRoad_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> bigEyeRoadBuilder_;

      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public java.util.List<protocols.baccarat.common.column> getBigEyeRoadList() {
        if (bigEyeRoadBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bigEyeRoad_);
        } else {
          return bigEyeRoadBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public int getBigEyeRoadCount() {
        if (bigEyeRoadBuilder_ == null) {
          return bigEyeRoad_.size();
        } else {
          return bigEyeRoadBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public protocols.baccarat.common.column getBigEyeRoad(int index) {
        if (bigEyeRoadBuilder_ == null) {
          return bigEyeRoad_.get(index);
        } else {
          return bigEyeRoadBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder setBigEyeRoad(
          int index, protocols.baccarat.common.column value) {
        if (bigEyeRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.set(index, value);
          onChanged();
        } else {
          bigEyeRoadBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder setBigEyeRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (bigEyeRoadBuilder_ == null) {
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.set(index, builderForValue.build());
          onChanged();
        } else {
          bigEyeRoadBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder addBigEyeRoad(protocols.baccarat.common.column value) {
        if (bigEyeRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.add(value);
          onChanged();
        } else {
          bigEyeRoadBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder addBigEyeRoad(
          int index, protocols.baccarat.common.column value) {
        if (bigEyeRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.add(index, value);
          onChanged();
        } else {
          bigEyeRoadBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder addBigEyeRoad(
          protocols.baccarat.common.column.Builder builderForValue) {
        if (bigEyeRoadBuilder_ == null) {
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.add(builderForValue.build());
          onChanged();
        } else {
          bigEyeRoadBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder addBigEyeRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (bigEyeRoadBuilder_ == null) {
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.add(index, builderForValue.build());
          onChanged();
        } else {
          bigEyeRoadBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder addAllBigEyeRoad(
          java.lang.Iterable<? extends protocols.baccarat.common.column> values) {
        if (bigEyeRoadBuilder_ == null) {
          ensureBigEyeRoadIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bigEyeRoad_);
          onChanged();
        } else {
          bigEyeRoadBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder clearBigEyeRoad() {
        if (bigEyeRoadBuilder_ == null) {
          bigEyeRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          bigEyeRoadBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public Builder removeBigEyeRoad(int index) {
        if (bigEyeRoadBuilder_ == null) {
          ensureBigEyeRoadIsMutable();
          bigEyeRoad_.remove(index);
          onChanged();
        } else {
          bigEyeRoadBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public protocols.baccarat.common.column.Builder getBigEyeRoadBuilder(
          int index) {
        return getBigEyeRoadFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public protocols.baccarat.common.columnOrBuilder getBigEyeRoadOrBuilder(
          int index) {
        if (bigEyeRoadBuilder_ == null) {
          return bigEyeRoad_.get(index);  } else {
          return bigEyeRoadBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
           getBigEyeRoadOrBuilderList() {
        if (bigEyeRoadBuilder_ != null) {
          return bigEyeRoadBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bigEyeRoad_);
        }
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public protocols.baccarat.common.column.Builder addBigEyeRoadBuilder() {
        return getBigEyeRoadFieldBuilder().addBuilder(
            protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public protocols.baccarat.common.column.Builder addBigEyeRoadBuilder(
          int index) {
        return getBigEyeRoadFieldBuilder().addBuilder(
            index, protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单大眼仔
       * </pre>
       *
       * <code>repeated .column bigEyeRoad = 3;</code>
       */
      public java.util.List<protocols.baccarat.common.column.Builder> 
           getBigEyeRoadBuilderList() {
        return getBigEyeRoadFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> 
          getBigEyeRoadFieldBuilder() {
        if (bigEyeRoadBuilder_ == null) {
          bigEyeRoadBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder>(
                  bigEyeRoad_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          bigEyeRoad_ = null;
        }
        return bigEyeRoadBuilder_;
      }

      private java.util.List<protocols.baccarat.common.column> smallRoad_ =
        java.util.Collections.emptyList();
      private void ensureSmallRoadIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          smallRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>(smallRoad_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> smallRoadBuilder_;

      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public java.util.List<protocols.baccarat.common.column> getSmallRoadList() {
        if (smallRoadBuilder_ == null) {
          return java.util.Collections.unmodifiableList(smallRoad_);
        } else {
          return smallRoadBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public int getSmallRoadCount() {
        if (smallRoadBuilder_ == null) {
          return smallRoad_.size();
        } else {
          return smallRoadBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public protocols.baccarat.common.column getSmallRoad(int index) {
        if (smallRoadBuilder_ == null) {
          return smallRoad_.get(index);
        } else {
          return smallRoadBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder setSmallRoad(
          int index, protocols.baccarat.common.column value) {
        if (smallRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmallRoadIsMutable();
          smallRoad_.set(index, value);
          onChanged();
        } else {
          smallRoadBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder setSmallRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (smallRoadBuilder_ == null) {
          ensureSmallRoadIsMutable();
          smallRoad_.set(index, builderForValue.build());
          onChanged();
        } else {
          smallRoadBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder addSmallRoad(protocols.baccarat.common.column value) {
        if (smallRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmallRoadIsMutable();
          smallRoad_.add(value);
          onChanged();
        } else {
          smallRoadBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder addSmallRoad(
          int index, protocols.baccarat.common.column value) {
        if (smallRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmallRoadIsMutable();
          smallRoad_.add(index, value);
          onChanged();
        } else {
          smallRoadBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder addSmallRoad(
          protocols.baccarat.common.column.Builder builderForValue) {
        if (smallRoadBuilder_ == null) {
          ensureSmallRoadIsMutable();
          smallRoad_.add(builderForValue.build());
          onChanged();
        } else {
          smallRoadBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder addSmallRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (smallRoadBuilder_ == null) {
          ensureSmallRoadIsMutable();
          smallRoad_.add(index, builderForValue.build());
          onChanged();
        } else {
          smallRoadBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder addAllSmallRoad(
          java.lang.Iterable<? extends protocols.baccarat.common.column> values) {
        if (smallRoadBuilder_ == null) {
          ensureSmallRoadIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, smallRoad_);
          onChanged();
        } else {
          smallRoadBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder clearSmallRoad() {
        if (smallRoadBuilder_ == null) {
          smallRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          smallRoadBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public Builder removeSmallRoad(int index) {
        if (smallRoadBuilder_ == null) {
          ensureSmallRoadIsMutable();
          smallRoad_.remove(index);
          onChanged();
        } else {
          smallRoadBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public protocols.baccarat.common.column.Builder getSmallRoadBuilder(
          int index) {
        return getSmallRoadFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public protocols.baccarat.common.columnOrBuilder getSmallRoadOrBuilder(
          int index) {
        if (smallRoadBuilder_ == null) {
          return smallRoad_.get(index);  } else {
          return smallRoadBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
           getSmallRoadOrBuilderList() {
        if (smallRoadBuilder_ != null) {
          return smallRoadBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(smallRoad_);
        }
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public protocols.baccarat.common.column.Builder addSmallRoadBuilder() {
        return getSmallRoadFieldBuilder().addBuilder(
            protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public protocols.baccarat.common.column.Builder addSmallRoadBuilder(
          int index) {
        return getSmallRoadFieldBuilder().addBuilder(
            index, protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单小路
       * </pre>
       *
       * <code>repeated .column smallRoad = 4;</code>
       */
      public java.util.List<protocols.baccarat.common.column.Builder> 
           getSmallRoadBuilderList() {
        return getSmallRoadFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> 
          getSmallRoadFieldBuilder() {
        if (smallRoadBuilder_ == null) {
          smallRoadBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder>(
                  smallRoad_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          smallRoad_ = null;
        }
        return smallRoadBuilder_;
      }

      private java.util.List<protocols.baccarat.common.column> roachRoad_ =
        java.util.Collections.emptyList();
      private void ensureRoachRoadIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          roachRoad_ = new java.util.ArrayList<protocols.baccarat.common.column>(roachRoad_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> roachRoadBuilder_;

      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public java.util.List<protocols.baccarat.common.column> getRoachRoadList() {
        if (roachRoadBuilder_ == null) {
          return java.util.Collections.unmodifiableList(roachRoad_);
        } else {
          return roachRoadBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public int getRoachRoadCount() {
        if (roachRoadBuilder_ == null) {
          return roachRoad_.size();
        } else {
          return roachRoadBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public protocols.baccarat.common.column getRoachRoad(int index) {
        if (roachRoadBuilder_ == null) {
          return roachRoad_.get(index);
        } else {
          return roachRoadBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder setRoachRoad(
          int index, protocols.baccarat.common.column value) {
        if (roachRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoachRoadIsMutable();
          roachRoad_.set(index, value);
          onChanged();
        } else {
          roachRoadBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder setRoachRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (roachRoadBuilder_ == null) {
          ensureRoachRoadIsMutable();
          roachRoad_.set(index, builderForValue.build());
          onChanged();
        } else {
          roachRoadBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder addRoachRoad(protocols.baccarat.common.column value) {
        if (roachRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoachRoadIsMutable();
          roachRoad_.add(value);
          onChanged();
        } else {
          roachRoadBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder addRoachRoad(
          int index, protocols.baccarat.common.column value) {
        if (roachRoadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoachRoadIsMutable();
          roachRoad_.add(index, value);
          onChanged();
        } else {
          roachRoadBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder addRoachRoad(
          protocols.baccarat.common.column.Builder builderForValue) {
        if (roachRoadBuilder_ == null) {
          ensureRoachRoadIsMutable();
          roachRoad_.add(builderForValue.build());
          onChanged();
        } else {
          roachRoadBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder addRoachRoad(
          int index, protocols.baccarat.common.column.Builder builderForValue) {
        if (roachRoadBuilder_ == null) {
          ensureRoachRoadIsMutable();
          roachRoad_.add(index, builderForValue.build());
          onChanged();
        } else {
          roachRoadBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder addAllRoachRoad(
          java.lang.Iterable<? extends protocols.baccarat.common.column> values) {
        if (roachRoadBuilder_ == null) {
          ensureRoachRoadIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, roachRoad_);
          onChanged();
        } else {
          roachRoadBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder clearRoachRoad() {
        if (roachRoadBuilder_ == null) {
          roachRoad_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          roachRoadBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public Builder removeRoachRoad(int index) {
        if (roachRoadBuilder_ == null) {
          ensureRoachRoadIsMutable();
          roachRoad_.remove(index);
          onChanged();
        } else {
          roachRoadBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public protocols.baccarat.common.column.Builder getRoachRoadBuilder(
          int index) {
        return getRoachRoadFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public protocols.baccarat.common.columnOrBuilder getRoachRoadOrBuilder(
          int index) {
        if (roachRoadBuilder_ == null) {
          return roachRoad_.get(index);  } else {
          return roachRoadBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public java.util.List<? extends protocols.baccarat.common.columnOrBuilder> 
           getRoachRoadOrBuilderList() {
        if (roachRoadBuilder_ != null) {
          return roachRoadBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(roachRoad_);
        }
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public protocols.baccarat.common.column.Builder addRoachRoadBuilder() {
        return getRoachRoadFieldBuilder().addBuilder(
            protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public protocols.baccarat.common.column.Builder addRoachRoadBuilder(
          int index) {
        return getRoachRoadFieldBuilder().addBuilder(
            index, protocols.baccarat.common.column.getDefaultInstance());
      }
      /**
       * <pre>
       * 路单蟑螂路
       * </pre>
       *
       * <code>repeated .column roachRoad = 5;</code>
       */
      public java.util.List<protocols.baccarat.common.column.Builder> 
           getRoachRoadBuilderList() {
        return getRoachRoadFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder> 
          getRoachRoadFieldBuilder() {
        if (roachRoadBuilder_ == null) {
          roachRoadBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocols.baccarat.common.column, protocols.baccarat.common.column.Builder, protocols.baccarat.common.columnOrBuilder>(
                  roachRoad_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          roachRoad_ = null;
        }
        return roachRoadBuilder_;
      }

      private int total_ ;
      /**
       * <pre>
       * 总局数
       * </pre>
       *
       * <code>optional uint32 total = 6;</code>
       */
      public boolean hasTotal() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * 总局数
       * </pre>
       *
       * <code>optional uint32 total = 6;</code>
       */
      public int getTotal() {
        return total_;
      }
      /**
       * <pre>
       * 总局数
       * </pre>
       *
       * <code>optional uint32 total = 6;</code>
       */
      public Builder setTotal(int value) {
        bitField0_ |= 0x00000020;
        total_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 总局数
       * </pre>
       *
       * <code>optional uint32 total = 6;</code>
       */
      public Builder clearTotal() {
        bitField0_ = (bitField0_ & ~0x00000020);
        total_ = 0;
        onChanged();
        return this;
      }

      private int bankerWin_ ;
      /**
       * <pre>
       * 庄赢局数
       * </pre>
       *
       * <code>optional uint32 bankerWin = 7;</code>
       */
      public boolean hasBankerWin() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * 庄赢局数
       * </pre>
       *
       * <code>optional uint32 bankerWin = 7;</code>
       */
      public int getBankerWin() {
        return bankerWin_;
      }
      /**
       * <pre>
       * 庄赢局数
       * </pre>
       *
       * <code>optional uint32 bankerWin = 7;</code>
       */
      public Builder setBankerWin(int value) {
        bitField0_ |= 0x00000040;
        bankerWin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄赢局数
       * </pre>
       *
       * <code>optional uint32 bankerWin = 7;</code>
       */
      public Builder clearBankerWin() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bankerWin_ = 0;
        onChanged();
        return this;
      }

      private int playerWin_ ;
      /**
       * <pre>
       * 闲赢局数
       * </pre>
       *
       * <code>optional uint32 playerWin = 8;</code>
       */
      public boolean hasPlayerWin() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * 闲赢局数
       * </pre>
       *
       * <code>optional uint32 playerWin = 8;</code>
       */
      public int getPlayerWin() {
        return playerWin_;
      }
      /**
       * <pre>
       * 闲赢局数
       * </pre>
       *
       * <code>optional uint32 playerWin = 8;</code>
       */
      public Builder setPlayerWin(int value) {
        bitField0_ |= 0x00000080;
        playerWin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲赢局数
       * </pre>
       *
       * <code>optional uint32 playerWin = 8;</code>
       */
      public Builder clearPlayerWin() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerWin_ = 0;
        onChanged();
        return this;
      }

      private int tie_ ;
      /**
       * <pre>
       * 和局数
       * </pre>
       *
       * <code>optional uint32 tie = 9;</code>
       */
      public boolean hasTie() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * 和局数
       * </pre>
       *
       * <code>optional uint32 tie = 9;</code>
       */
      public int getTie() {
        return tie_;
      }
      /**
       * <pre>
       * 和局数
       * </pre>
       *
       * <code>optional uint32 tie = 9;</code>
       */
      public Builder setTie(int value) {
        bitField0_ |= 0x00000100;
        tie_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 和局数
       * </pre>
       *
       * <code>optional uint32 tie = 9;</code>
       */
      public Builder clearTie() {
        bitField0_ = (bitField0_ & ~0x00000100);
        tie_ = 0;
        onChanged();
        return this;
      }

      private int bankerPair_ ;
      /**
       * <pre>
       * 庄对局数
       * </pre>
       *
       * <code>optional uint32 bankerPair = 10;</code>
       */
      public boolean hasBankerPair() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * 庄对局数
       * </pre>
       *
       * <code>optional uint32 bankerPair = 10;</code>
       */
      public int getBankerPair() {
        return bankerPair_;
      }
      /**
       * <pre>
       * 庄对局数
       * </pre>
       *
       * <code>optional uint32 bankerPair = 10;</code>
       */
      public Builder setBankerPair(int value) {
        bitField0_ |= 0x00000200;
        bankerPair_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 庄对局数
       * </pre>
       *
       * <code>optional uint32 bankerPair = 10;</code>
       */
      public Builder clearBankerPair() {
        bitField0_ = (bitField0_ & ~0x00000200);
        bankerPair_ = 0;
        onChanged();
        return this;
      }

      private int playerPair_ ;
      /**
       * <pre>
       * 闲对局数
       * </pre>
       *
       * <code>optional uint32 playerPair = 11;</code>
       */
      public boolean hasPlayerPair() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * 闲对局数
       * </pre>
       *
       * <code>optional uint32 playerPair = 11;</code>
       */
      public int getPlayerPair() {
        return playerPair_;
      }
      /**
       * <pre>
       * 闲对局数
       * </pre>
       *
       * <code>optional uint32 playerPair = 11;</code>
       */
      public Builder setPlayerPair(int value) {
        bitField0_ |= 0x00000400;
        playerPair_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闲对局数
       * </pre>
       *
       * <code>optional uint32 playerPair = 11;</code>
       */
      public Builder clearPlayerPair() {
        bitField0_ = (bitField0_ & ~0x00000400);
        playerPair_ = 0;
        onChanged();
        return this;
      }

      private int sky_ ;
      /**
       * <pre>
       * 天牌局数
       * </pre>
       *
       * <code>optional uint32 sky = 12;</code>
       */
      public boolean hasSky() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * 天牌局数
       * </pre>
       *
       * <code>optional uint32 sky = 12;</code>
       */
      public int getSky() {
        return sky_;
      }
      /**
       * <pre>
       * 天牌局数
       * </pre>
       *
       * <code>optional uint32 sky = 12;</code>
       */
      public Builder setSky(int value) {
        bitField0_ |= 0x00000800;
        sky_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 天牌局数
       * </pre>
       *
       * <code>optional uint32 sky = 12;</code>
       */
      public Builder clearSky() {
        bitField0_ = (bitField0_ & ~0x00000800);
        sky_ = 0;
        onChanged();
        return this;
      }

      private protocols.baccarat.common.ask banker_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder> bankerBuilder_;
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public boolean hasBanker() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public protocols.baccarat.common.ask getBanker() {
        if (bankerBuilder_ == null) {
          return banker_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : banker_;
        } else {
          return bankerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public Builder setBanker(protocols.baccarat.common.ask value) {
        if (bankerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          banker_ = value;
          onChanged();
        } else {
          bankerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public Builder setBanker(
          protocols.baccarat.common.ask.Builder builderForValue) {
        if (bankerBuilder_ == null) {
          banker_ = builderForValue.build();
          onChanged();
        } else {
          bankerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public Builder mergeBanker(protocols.baccarat.common.ask value) {
        if (bankerBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              banker_ != null &&
              banker_ != protocols.baccarat.common.ask.getDefaultInstance()) {
            banker_ =
              protocols.baccarat.common.ask.newBuilder(banker_).mergeFrom(value).buildPartial();
          } else {
            banker_ = value;
          }
          onChanged();
        } else {
          bankerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public Builder clearBanker() {
        if (bankerBuilder_ == null) {
          banker_ = null;
          onChanged();
        } else {
          bankerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public protocols.baccarat.common.ask.Builder getBankerBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getBankerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      public protocols.baccarat.common.askOrBuilder getBankerOrBuilder() {
        if (bankerBuilder_ != null) {
          return bankerBuilder_.getMessageOrBuilder();
        } else {
          return banker_ == null ?
              protocols.baccarat.common.ask.getDefaultInstance() : banker_;
        }
      }
      /**
       * <pre>
       * 庄问路
       * </pre>
       *
       * <code>optional .ask banker = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder> 
          getBankerFieldBuilder() {
        if (bankerBuilder_ == null) {
          bankerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder>(
                  getBanker(),
                  getParentForChildren(),
                  isClean());
          banker_ = null;
        }
        return bankerBuilder_;
      }

      private protocols.baccarat.common.ask player_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder> playerBuilder_;
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public boolean hasPlayer() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public protocols.baccarat.common.ask getPlayer() {
        if (playerBuilder_ == null) {
          return player_ == null ? protocols.baccarat.common.ask.getDefaultInstance() : player_;
        } else {
          return playerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public Builder setPlayer(protocols.baccarat.common.ask value) {
        if (playerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          player_ = value;
          onChanged();
        } else {
          playerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public Builder setPlayer(
          protocols.baccarat.common.ask.Builder builderForValue) {
        if (playerBuilder_ == null) {
          player_ = builderForValue.build();
          onChanged();
        } else {
          playerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public Builder mergePlayer(protocols.baccarat.common.ask value) {
        if (playerBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              player_ != null &&
              player_ != protocols.baccarat.common.ask.getDefaultInstance()) {
            player_ =
              protocols.baccarat.common.ask.newBuilder(player_).mergeFrom(value).buildPartial();
          } else {
            player_ = value;
          }
          onChanged();
        } else {
          playerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public Builder clearPlayer() {
        if (playerBuilder_ == null) {
          player_ = null;
          onChanged();
        } else {
          playerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public protocols.baccarat.common.ask.Builder getPlayerBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getPlayerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      public protocols.baccarat.common.askOrBuilder getPlayerOrBuilder() {
        if (playerBuilder_ != null) {
          return playerBuilder_.getMessageOrBuilder();
        } else {
          return player_ == null ?
              protocols.baccarat.common.ask.getDefaultInstance() : player_;
        }
      }
      /**
       * <pre>
       * 闲问路
       * </pre>
       *
       * <code>optional .ask player = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder> 
          getPlayerFieldBuilder() {
        if (playerBuilder_ == null) {
          playerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              protocols.baccarat.common.ask, protocols.baccarat.common.ask.Builder, protocols.baccarat.common.askOrBuilder>(
                  getPlayer(),
                  getParentForChildren(),
                  isClean());
          player_ = null;
        }
        return playerBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:waybill)
    }

    // @@protoc_insertion_point(class_scope:waybill)
    private static final protocols.baccarat.common.waybill DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.waybill();
    }

    public static protocols.baccarat.common.waybill getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<waybill>
        PARSER = new com.google.protobuf.AbstractParser<waybill>() {
      public waybill parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new waybill(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<waybill> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<waybill> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.waybill getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 bigeye = 1;</code>
     */
    boolean hasBigeye();
    /**
     * <code>optional uint32 bigeye = 1;</code>
     */
    int getBigeye();

    /**
     * <code>optional uint32 small = 2;</code>
     */
    boolean hasSmall();
    /**
     * <code>optional uint32 small = 2;</code>
     */
    int getSmall();

    /**
     * <code>optional uint32 roach = 3;</code>
     */
    boolean hasRoach();
    /**
     * <code>optional uint32 roach = 3;</code>
     */
    int getRoach();
  }
  /**
   * Protobuf type {@code ask}
   */
  public  static final class ask extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ask)
      askOrBuilder {
    // Use ask.newBuilder() to construct.
    private ask(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ask() {
      bigeye_ = 0;
      small_ = 0;
      roach_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bigeye_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              small_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              roach_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.ask.class, protocols.baccarat.common.ask.Builder.class);
    }

    private int bitField0_;
    public static final int BIGEYE_FIELD_NUMBER = 1;
    private int bigeye_;
    /**
     * <code>optional uint32 bigeye = 1;</code>
     */
    public boolean hasBigeye() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 bigeye = 1;</code>
     */
    public int getBigeye() {
      return bigeye_;
    }

    public static final int SMALL_FIELD_NUMBER = 2;
    private int small_;
    /**
     * <code>optional uint32 small = 2;</code>
     */
    public boolean hasSmall() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 small = 2;</code>
     */
    public int getSmall() {
      return small_;
    }

    public static final int ROACH_FIELD_NUMBER = 3;
    private int roach_;
    /**
     * <code>optional uint32 roach = 3;</code>
     */
    public boolean hasRoach() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 roach = 3;</code>
     */
    public int getRoach() {
      return roach_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, bigeye_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, small_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, roach_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, bigeye_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, small_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, roach_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.ask)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.ask other = (protocols.baccarat.common.ask) obj;

      boolean result = true;
      result = result && (hasBigeye() == other.hasBigeye());
      if (hasBigeye()) {
        result = result && (getBigeye()
            == other.getBigeye());
      }
      result = result && (hasSmall() == other.hasSmall());
      if (hasSmall()) {
        result = result && (getSmall()
            == other.getSmall());
      }
      result = result && (hasRoach() == other.hasRoach());
      if (hasRoach()) {
        result = result && (getRoach()
            == other.getRoach());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBigeye()) {
        hash = (37 * hash) + BIGEYE_FIELD_NUMBER;
        hash = (53 * hash) + getBigeye();
      }
      if (hasSmall()) {
        hash = (37 * hash) + SMALL_FIELD_NUMBER;
        hash = (53 * hash) + getSmall();
      }
      if (hasRoach()) {
        hash = (37 * hash) + ROACH_FIELD_NUMBER;
        hash = (53 * hash) + getRoach();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.ask prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ask}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ask)
        protocols.baccarat.common.askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.ask.class, protocols.baccarat.common.ask.Builder.class);
      }

      // Construct using protocols.baccarat.common.ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        bigeye_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        small_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        roach_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_ask_descriptor;
      }

      public protocols.baccarat.common.ask getDefaultInstanceForType() {
        return protocols.baccarat.common.ask.getDefaultInstance();
      }

      public protocols.baccarat.common.ask build() {
        protocols.baccarat.common.ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.ask buildPartial() {
        protocols.baccarat.common.ask result = new protocols.baccarat.common.ask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bigeye_ = bigeye_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.small_ = small_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.roach_ = roach_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.ask) {
          return mergeFrom((protocols.baccarat.common.ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.ask other) {
        if (other == protocols.baccarat.common.ask.getDefaultInstance()) return this;
        if (other.hasBigeye()) {
          setBigeye(other.getBigeye());
        }
        if (other.hasSmall()) {
          setSmall(other.getSmall());
        }
        if (other.hasRoach()) {
          setRoach(other.getRoach());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.ask) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int bigeye_ ;
      /**
       * <code>optional uint32 bigeye = 1;</code>
       */
      public boolean hasBigeye() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 bigeye = 1;</code>
       */
      public int getBigeye() {
        return bigeye_;
      }
      /**
       * <code>optional uint32 bigeye = 1;</code>
       */
      public Builder setBigeye(int value) {
        bitField0_ |= 0x00000001;
        bigeye_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bigeye = 1;</code>
       */
      public Builder clearBigeye() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bigeye_ = 0;
        onChanged();
        return this;
      }

      private int small_ ;
      /**
       * <code>optional uint32 small = 2;</code>
       */
      public boolean hasSmall() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 small = 2;</code>
       */
      public int getSmall() {
        return small_;
      }
      /**
       * <code>optional uint32 small = 2;</code>
       */
      public Builder setSmall(int value) {
        bitField0_ |= 0x00000002;
        small_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 small = 2;</code>
       */
      public Builder clearSmall() {
        bitField0_ = (bitField0_ & ~0x00000002);
        small_ = 0;
        onChanged();
        return this;
      }

      private int roach_ ;
      /**
       * <code>optional uint32 roach = 3;</code>
       */
      public boolean hasRoach() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 roach = 3;</code>
       */
      public int getRoach() {
        return roach_;
      }
      /**
       * <code>optional uint32 roach = 3;</code>
       */
      public Builder setRoach(int value) {
        bitField0_ |= 0x00000004;
        roach_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 roach = 3;</code>
       */
      public Builder clearRoach() {
        bitField0_ = (bitField0_ & ~0x00000004);
        roach_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ask)
    }

    // @@protoc_insertion_point(class_scope:ask)
    private static final protocols.baccarat.common.ask DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.ask();
    }

    public static protocols.baccarat.common.ask getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ask>
        PARSER = new com.google.protobuf.AbstractParser<ask>() {
      public ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ask(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ask> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ask> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.ask getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface columnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:column)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    java.util.List<java.lang.Integer> getPivotList();
    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    int getPivotCount();
    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    int getPivot(int index);
  }
  /**
   * <pre>
   * 路单一列
   * </pre>
   *
   * Protobuf type {@code column}
   */
  public  static final class column extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:column)
      columnOrBuilder {
    // Use column.newBuilder() to construct.
    private column(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private column() {
      pivot_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private column(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                pivot_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              pivot_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                pivot_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                pivot_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          pivot_ = java.util.Collections.unmodifiableList(pivot_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocols.baccarat.common.internal_static_column_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocols.baccarat.common.internal_static_column_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocols.baccarat.common.column.class, protocols.baccarat.common.column.Builder.class);
    }

    public static final int PIVOT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> pivot_;
    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getPivotList() {
      return pivot_;
    }
    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    public int getPivotCount() {
      return pivot_.size();
    }
    /**
     * <pre>
     * pivot大路取值0-24(0代表空)，一列最多6个pivot
     * </pre>
     *
     * <code>repeated uint32 pivot = 1;</code>
     */
    public int getPivot(int index) {
      return pivot_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < pivot_.size(); i++) {
        output.writeUInt32(1, pivot_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < pivot_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(pivot_.get(i));
        }
        size += dataSize;
        size += 1 * getPivotList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocols.baccarat.common.column)) {
        return super.equals(obj);
      }
      protocols.baccarat.common.column other = (protocols.baccarat.common.column) obj;

      boolean result = true;
      result = result && getPivotList()
          .equals(other.getPivotList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPivotCount() > 0) {
        hash = (37 * hash) + PIVOT_FIELD_NUMBER;
        hash = (53 * hash) + getPivotList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocols.baccarat.common.column parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.column parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.column parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocols.baccarat.common.column parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocols.baccarat.common.column parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.column parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.column parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.column parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocols.baccarat.common.column parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocols.baccarat.common.column parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocols.baccarat.common.column prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 路单一列
     * </pre>
     *
     * Protobuf type {@code column}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:column)
        protocols.baccarat.common.columnOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocols.baccarat.common.internal_static_column_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocols.baccarat.common.internal_static_column_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocols.baccarat.common.column.class, protocols.baccarat.common.column.Builder.class);
      }

      // Construct using protocols.baccarat.common.column.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        pivot_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocols.baccarat.common.internal_static_column_descriptor;
      }

      public protocols.baccarat.common.column getDefaultInstanceForType() {
        return protocols.baccarat.common.column.getDefaultInstance();
      }

      public protocols.baccarat.common.column build() {
        protocols.baccarat.common.column result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocols.baccarat.common.column buildPartial() {
        protocols.baccarat.common.column result = new protocols.baccarat.common.column(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          pivot_ = java.util.Collections.unmodifiableList(pivot_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.pivot_ = pivot_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocols.baccarat.common.column) {
          return mergeFrom((protocols.baccarat.common.column)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocols.baccarat.common.column other) {
        if (other == protocols.baccarat.common.column.getDefaultInstance()) return this;
        if (!other.pivot_.isEmpty()) {
          if (pivot_.isEmpty()) {
            pivot_ = other.pivot_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePivotIsMutable();
            pivot_.addAll(other.pivot_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocols.baccarat.common.column parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocols.baccarat.common.column) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> pivot_ = java.util.Collections.emptyList();
      private void ensurePivotIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          pivot_ = new java.util.ArrayList<java.lang.Integer>(pivot_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getPivotList() {
        return java.util.Collections.unmodifiableList(pivot_);
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public int getPivotCount() {
        return pivot_.size();
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public int getPivot(int index) {
        return pivot_.get(index);
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public Builder setPivot(
          int index, int value) {
        ensurePivotIsMutable();
        pivot_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public Builder addPivot(int value) {
        ensurePivotIsMutable();
        pivot_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public Builder addAllPivot(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePivotIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pivot_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pivot大路取值0-24(0代表空)，一列最多6个pivot
       * </pre>
       *
       * <code>repeated uint32 pivot = 1;</code>
       */
      public Builder clearPivot() {
        pivot_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:column)
    }

    // @@protoc_insertion_point(class_scope:column)
    private static final protocols.baccarat.common.column DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocols.baccarat.common.column();
    }

    public static protocols.baccarat.common.column getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<column>
        PARSER = new com.google.protobuf.AbstractParser<column>() {
      public column parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new column(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<column> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<column> getParserForType() {
      return PARSER;
    }

    public protocols.baccarat.common.column getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_room_info_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_room_info_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_baccarat_result_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_baccarat_result_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_user_info_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_user_info_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bet_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_waybill_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_waybill_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ask_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_column_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_column_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025baccarat/common.proto\"\371\001\n\troom_info\022\016\n" +
      "\006roomId\030\001 \002(\t\022\017\n\007minCoin\030\003 \001(\r\022\016\n\006minBet" +
      "\030\004 \001(\r\022\016\n\006maxBet\030\005 \001(\r\022\025\n\rtiePairMinBet\030" +
      "\006 \001(\r\022\025\n\rtiePairMaxBet\030\007 \001(\r\022\016\n\006maxRed\030\010" +
      " \001(\r\022\023\n\013drawPercent\030\t \001(\r\022\017\n\007betTime\030\n \001" +
      "(\r\022\020\n\010overTime\030\013 \001(\r\022\023\n\013playerCount\030\014 \001(" +
      "\r\022\017\n\007remains\030\r \001(\r\022\017\n\007channel\030\016 \001(\t\"\271\001\n\017" +
      "baccarat_result\022\023\n\013playerHands\030\001 \003(\r\022\023\n\013" +
      "bankerhands\030\002 \003(\r\022\024\n\014player2Point\030\003 \001(\r\022" +
      "\024\n\014banker2Point\030\004 \001(\r\022\024\n\014player3Point\030\005 ",
      "\001(\021\022\024\n\014banker3Point\030\006 \001(\021\022\023\n\013win_targets" +
      "\030\007 \003(\t\022\017\n\007remains\030\010 \001(\r\"~\n\tuser_info\022\016\n\006" +
      "userId\030\001 \001(\r\022\020\n\010userName\030\002 \001(\t\022\016\n\006avatar" +
      "\030\003 \001(\r\022\014\n\004coin\030\004 \001(\r\022\016\n\006seatId\030\005 \001(\r\022\016\n\006" +
      "silent\030\006 \001(\010\022\021\n\tbigPlayer\030\007 \001(\010\"$\n\003bet\022\016" +
      "\n\006target\030\001 \001(\t\022\r\n\005coins\030\002 \001(\r\"\267\002\n\007waybil" +
      "l\022\031\n\010mainRoad\030\001 \003(\0132\007.column\022\031\n\010dishRoad" +
      "\030\002 \003(\0132\007.column\022\033\n\nbigEyeRoad\030\003 \003(\0132\007.co" +
      "lumn\022\032\n\tsmallRoad\030\004 \003(\0132\007.column\022\032\n\troac" +
      "hRoad\030\005 \003(\0132\007.column\022\r\n\005total\030\006 \001(\r\022\021\n\tb",
      "ankerWin\030\007 \001(\r\022\021\n\tplayerWin\030\010 \001(\r\022\013\n\003tie" +
      "\030\t \001(\r\022\022\n\nbankerPair\030\n \001(\r\022\022\n\nplayerPair" +
      "\030\013 \001(\r\022\013\n\003sky\030\014 \001(\r\022\024\n\006banker\030\r \001(\0132\004.as" +
      "k\022\024\n\006player\030\016 \001(\0132\004.ask\"3\n\003ask\022\016\n\006bigeye" +
      "\030\001 \001(\r\022\r\n\005small\030\002 \001(\r\022\r\n\005roach\030\003 \001(\r\"\027\n\006" +
      "column\022\r\n\005pivot\030\001 \003(\r*R\n\005beton\022\016\n\nbanker" +
      "_win\020\000\022\016\n\nplayer_win\020\001\022\017\n\013banker_pair\020\002\022" +
      "\017\n\013player_pair\020\003\022\007\n\003tie\020\004B\034\n\022protocols.b" +
      "accaratB\006common"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_room_info_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_room_info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_room_info_descriptor,
        new java.lang.String[] { "RoomId", "MinCoin", "MinBet", "MaxBet", "TiePairMinBet", "TiePairMaxBet", "MaxRed", "DrawPercent", "BetTime", "OverTime", "PlayerCount", "Remains", "Channel", });
    internal_static_baccarat_result_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_baccarat_result_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_baccarat_result_descriptor,
        new java.lang.String[] { "PlayerHands", "Bankerhands", "Player2Point", "Banker2Point", "Player3Point", "Banker3Point", "WinTargets", "Remains", });
    internal_static_user_info_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_user_info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_user_info_descriptor,
        new java.lang.String[] { "UserId", "UserName", "Avatar", "Coin", "SeatId", "Silent", "BigPlayer", });
    internal_static_bet_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_bet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bet_descriptor,
        new java.lang.String[] { "Target", "Coins", });
    internal_static_waybill_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_waybill_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_waybill_descriptor,
        new java.lang.String[] { "MainRoad", "DishRoad", "BigEyeRoad", "SmallRoad", "RoachRoad", "Total", "BankerWin", "PlayerWin", "Tie", "BankerPair", "PlayerPair", "Sky", "Banker", "Player", });
    internal_static_ask_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ask_descriptor,
        new java.lang.String[] { "Bigeye", "Small", "Roach", });
    internal_static_column_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_column_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_column_descriptor,
        new java.lang.String[] { "Pivot", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}

package com.mozat.morange.dbcache.core;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Map;

import com.mozat.morange.log.DebugLog;

public abstract class TableBase {
	public abstract TableCache _getTableCache();
	public abstract String _getTableName();
	
	public abstract boolean update();
	public abstract boolean remove();
	public abstract String _getCacheKey();

	public abstract void _setValue(int __fidx, Object __val);
	@SuppressWarnings("rawtypes")
	public abstract Comparable _getValue(int __fidx);
	public abstract Map<String, Integer> _getFieldMap();
	public abstract Long _getIdValue();
	public abstract void _setIdValue(Long val);
	public abstract boolean _isIdAutoGenerated();
	
	public static String _genKey(Object ...args){
		String __key = null;
		for (Object obj: args){
			String _s;
			if (obj instanceof java.util.Date){
				_s = "" + ((java.util.Date)obj).getTime();
			}
			else{
				_s = obj.toString();
			}
			
			if (__key == null){
				__key = _s;
			}
			else{
				__key += ":" + _s;
			}
		}
		
		return __key;
	}
	
	@Override
	public String toString(){
		String res = "{";
		
		boolean isFirst = true;
		for (Field fld: this.getClass().getFields()){
			if (Modifier.isStatic(fld.getModifiers())){
				continue;
			}
			
			if (!isFirst){
				res += ", ";
			}
			else{
				isFirst = false;
			}
			
			try{
				res += fld.getName() + ":";
				if (fld.getType().isPrimitive()){
					res += fld.get(this);
				}
				else{
					res += "\"" + fld.get(this) + "\"";
				}
			}
			catch(Exception ex){
				res += "null";
			}
		}
		
		res += "}";
		return res;
	}

	public static class AttributeValue<T>{
		private String name;
		private int fidx;
		private T val;
		
		public AttributeValue(String name, int fidx, T val){
			this.name = name;
			this.fidx = fidx;
			this.val = val;
		}
		
		public String getName(){
			return this.name;
		}
		
		public int getFidx(){
			return this.fidx;
		}
		
		public T getVal(){
			return this.val;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static class Attribute<T extends Comparable>{
		final public String name;
		final public Class<?> type;
		final int fidx;
		
		public Attribute(String name, Class<?> type, int fidx){
			this.name = name;
			this.type = type;
			this.fidx = fidx;
		}
		
		public AttributeValue<T> set(T val){
			return new AttributeValue<T>(this.name, this.fidx, val);
		}
		
		protected QueryCriteria newCriteria(int cmpType, T input){
			try{
				//Field field = this.type.getField(name);
				return new QueryCriteria(name, fidx, cmpType, input);
			}
			catch (Exception ex){
				DebugLog.info("[Attribute.newCriteria] ex: " + ex);
				return null;
			}
		}
		
		public QueryCriteria eq(T input){
			return newCriteria(QueryCriteria.EQ, input);
		}
		
		public QueryCriteria ne(T input){
			return newCriteria(QueryCriteria.NE, input);
		}
		
		public QueryCriteria lt(T input){
			return newCriteria(QueryCriteria.LT, input);
		}
		
		public QueryCriteria le(T input){
			return newCriteria(QueryCriteria.LE, input);
		}
		
		public QueryCriteria gt(T input){
			return newCriteria(QueryCriteria.GT, input);
		}
		
		public QueryCriteria ge(T input){
			return newCriteria(QueryCriteria.GE, input);
		}
	}
	
	public static class AttributeS extends Attribute<String>{

		public AttributeS(String name, Class<?> type, int fidx) {
			super(name, type, fidx);
		}
		
		public QueryCriteria contains(String input){
			return newCriteria(QueryCriteria.LIKE, input);
		}
	}
}


/*
* @Brief: Java Persistence Class (JPC) for Database Table.
*
* @Class: TRoomInnings
* @Namespace: com.mozat.morange.dbcache.tables
* @Table: ROOM_INNINGS
* @Primary Key: ID
* @Identity: ID
* @Unique Index: [u'ID']
*
* @Caution: This file is Auto Generated.
*     DO NOT modify this file EVEN IF you know what you are doing.
*/

package com.mozat.morange.dbcache.tables;

import java.util.ArrayList;
import java.util.HashMap;
import com.mozat.morange.dbcache.core.TableBase;
import com.mozat.morange.dbcache.core.TableCache;
import com.mozat.morange.dbcache.core.QueryCriteria;

public final class TRoomInnings extends TableBase implements java.io.Serializable{
    // Serializable ID
    private static final long serialVersionUID = 1L;

    private static TableCache _tableCache;
    private static String _tableName;

    private static boolean _isIdAutoGenerated = true;

    /**
    * This method is used by the engine.<br>
    * DON'T use this method under any circumstances.
    */
    @Override
    public TableCache _getTableCache(){return _tableCache;}

    /**
    * Never manually run SQL statements using TableCache Object.<br>
    * Think twice before hand-writing ANY SQL statements, and use it carefully.
    */
    @Deprecated
    public static TableCache __getTableCache(){return _tableCache;}

    @Override
    public String _getTableName(){return _tableName;}

    public static String __getTableName(){return _tableName;}

    public static void setCacheAndName(TableCache cache, String name){
        _tableCache = cache;
        _tableName = name;
    }

    @Override
    public Long _getIdValue(){
        Integer _idVal = this.ID;
        return _idVal.longValue();
    }

    @Override
    public void _setIdValue(Long _val){
        this.ID = _val.intValue();
    }

    @Override
    public boolean _isIdAutoGenerated(){
        return _isIdAutoGenerated;
    }


    // SQL templates
    private static final String _updateSQL = "UPDATE ROOM_INNINGS SET `ROOM_ID` = ?, `INNING` = ?, `USER_ID` = ?, `USER_NAME` = ?, `SEAT_ID` = ?, `USER_BET` = ?, `USER_GRAB` = ?, `CARDS` = ?, `SHOW_HAND_CARDS` = ?, `MIDDLE_CARD_TYPE` = ?, `CARD_TYPE` = ?, `MIDDLE_SCORE` = ?, `MIDDLE_TOTAL` = ?, `MIDDLE_DRAW` = ?, `END_SCORE` = ?, `END_TOTAL` = ?, `END_DRAW` = ?, `IS_DEALER` = ?, `STATUS` = ?, `CREATE_TIME` = ?, `END_TIME` = ? WHERE `ID` = ?;";
    private static final String _querySQL = "SELECT * FROM ROOM_INNINGS WHERE `ID` = ?;";
    private static final String _createSQL = "INSERT INTO ROOM_INNINGS (`ROOM_ID`, `INNING`, `USER_ID`, `USER_NAME`, `SEAT_ID`, `USER_BET`, `USER_GRAB`, `CARDS`, `SHOW_HAND_CARDS`, `MIDDLE_CARD_TYPE`, `CARD_TYPE`, `MIDDLE_SCORE`, `MIDDLE_TOTAL`, `MIDDLE_DRAW`, `END_SCORE`, `END_TOTAL`, `END_DRAW`, `IS_DEALER`, `STATUS`, `CREATE_TIME`, `END_TIME`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
    private static final String _deleteSQL = "DELETE FROM ROOM_INNINGS WHERE `ID` = ?;";

    // Field Map
    private static HashMap<String, Integer> AttrFieldMap;
    private static HashMap<String, Integer> getFieldMap(){
        if (AttrFieldMap == null){
            AttrFieldMap = new HashMap<String, Integer>();
            AttrFieldMap.put("ID", 1);
            AttrFieldMap.put("ROOM_ID", 2);
            AttrFieldMap.put("INNING", 3);
            AttrFieldMap.put("USER_ID", 4);
            AttrFieldMap.put("USER_NAME", 5);
            AttrFieldMap.put("SEAT_ID", 6);
            AttrFieldMap.put("USER_BET", 7);
            AttrFieldMap.put("USER_GRAB", 8);
            AttrFieldMap.put("CARDS", 9);
            AttrFieldMap.put("SHOW_HAND_CARDS", 10);
            AttrFieldMap.put("MIDDLE_CARD_TYPE", 11);
            AttrFieldMap.put("CARD_TYPE", 12);
            AttrFieldMap.put("MIDDLE_SCORE", 13);
            AttrFieldMap.put("MIDDLE_TOTAL", 14);
            AttrFieldMap.put("MIDDLE_DRAW", 15);
            AttrFieldMap.put("END_SCORE", 16);
            AttrFieldMap.put("END_TOTAL", 17);
            AttrFieldMap.put("END_DRAW", 18);
            AttrFieldMap.put("IS_DEALER", 19);
            AttrFieldMap.put("STATUS", 20);
            AttrFieldMap.put("CREATE_TIME", 21);
            AttrFieldMap.put("END_TIME", 22);
        }

        return AttrFieldMap;
    }

    // Attributes Wrapper for Query
    public static final TableBase.Attribute<Integer> AttrID = new TableBase.Attribute<Integer>("ID", TRoomInnings.class, 1);
    public static final TableBase.Attribute<Integer> AttrROOM_ID = new TableBase.Attribute<Integer>("ROOM_ID", TRoomInnings.class, 2);
    public static final TableBase.Attribute<Integer> AttrINNING = new TableBase.Attribute<Integer>("INNING", TRoomInnings.class, 3);
    public static final TableBase.Attribute<Integer> AttrUSER_ID = new TableBase.Attribute<Integer>("USER_ID", TRoomInnings.class, 4);
    public static final TableBase.AttributeS AttrUSER_NAME = new TableBase.AttributeS("USER_NAME", TRoomInnings.class, 5);
    public static final TableBase.Attribute<Integer> AttrSEAT_ID = new TableBase.Attribute<Integer>("SEAT_ID", TRoomInnings.class, 6);
    public static final TableBase.Attribute<Integer> AttrUSER_BET = new TableBase.Attribute<Integer>("USER_BET", TRoomInnings.class, 7);
    public static final TableBase.Attribute<Integer> AttrUSER_GRAB = new TableBase.Attribute<Integer>("USER_GRAB", TRoomInnings.class, 8);
    public static final TableBase.AttributeS AttrCARDS = new TableBase.AttributeS("CARDS", TRoomInnings.class, 9);
    public static final TableBase.AttributeS AttrSHOW_HAND_CARDS = new TableBase.AttributeS("SHOW_HAND_CARDS", TRoomInnings.class, 10);
    public static final TableBase.AttributeS AttrMIDDLE_CARD_TYPE = new TableBase.AttributeS("MIDDLE_CARD_TYPE", TRoomInnings.class, 11);
    public static final TableBase.AttributeS AttrCARD_TYPE = new TableBase.AttributeS("CARD_TYPE", TRoomInnings.class, 12);
    public static final TableBase.Attribute<Integer> AttrMIDDLE_SCORE = new TableBase.Attribute<Integer>("MIDDLE_SCORE", TRoomInnings.class, 13);
    public static final TableBase.Attribute<Integer> AttrMIDDLE_TOTAL = new TableBase.Attribute<Integer>("MIDDLE_TOTAL", TRoomInnings.class, 14);
    public static final TableBase.Attribute<Float> AttrMIDDLE_DRAW = new TableBase.Attribute<Float>("MIDDLE_DRAW", TRoomInnings.class, 15);
    public static final TableBase.Attribute<Integer> AttrEND_SCORE = new TableBase.Attribute<Integer>("END_SCORE", TRoomInnings.class, 16);
    public static final TableBase.Attribute<Integer> AttrEND_TOTAL = new TableBase.Attribute<Integer>("END_TOTAL", TRoomInnings.class, 17);
    public static final TableBase.Attribute<Float> AttrEND_DRAW = new TableBase.Attribute<Float>("END_DRAW", TRoomInnings.class, 18);
    public static final TableBase.Attribute<Boolean> AttrIS_DEALER = new TableBase.Attribute<Boolean>("IS_DEALER", TRoomInnings.class, 19);
    public static final TableBase.Attribute<Integer> AttrSTATUS = new TableBase.Attribute<Integer>("STATUS", TRoomInnings.class, 20);
    public static final TableBase.Attribute<java.util.Date> AttrCREATE_TIME = new TableBase.Attribute<java.util.Date>("CREATE_TIME", TRoomInnings.class, 21);
    public static final TableBase.Attribute<java.util.Date> AttrEND_TIME = new TableBase.Attribute<java.util.Date>("END_TIME", TRoomInnings.class, 22);

    public static TableBase.AttributeValue<?>[] valueList(TableBase.AttributeValue<?>...valList){
        return valList;
    }

    // Member Fields.
    public int ID = 0;
    public int ROOM_ID = 0;
    public int INNING = 0;
    public int USER_ID = 0;
    public String USER_NAME = "";
    public int SEAT_ID = 0;
    public int USER_BET = 0;
    public int USER_GRAB = 0;
    public String CARDS = "";
    public String SHOW_HAND_CARDS = "";
    public String MIDDLE_CARD_TYPE = "";
    public String CARD_TYPE = "";
    public int MIDDLE_SCORE = 0;
    public int MIDDLE_TOTAL = 0;
    public float MIDDLE_DRAW = 0;
    public int END_SCORE = 0;
    public int END_TOTAL = 0;
    public float END_DRAW = 0;
    public boolean IS_DEALER = false;
    public int STATUS = 0;
    public java.util.Date CREATE_TIME = new java.util.Date(0);
    public java.util.Date END_TIME = new java.util.Date(0);

    // DON'T Invoke This Method Manually.
    @Override
    public HashMap<String, Integer> _getFieldMap(){
        return TRoomInnings.getFieldMap();
    }

    // DON'T Invoke This Method Manually.
    @Override
    public void _setValue(int __fidx, Object __val){
        switch (__fidx){
        case 1: {this.ID = (Integer)__val; break;}
        case 2: {this.ROOM_ID = (Integer)__val; break;}
        case 3: {this.INNING = (Integer)__val; break;}
        case 4: {this.USER_ID = (Integer)__val; break;}
        case 5: {this.USER_NAME = (String)__val; break;}
        case 6: {this.SEAT_ID = (Integer)__val; break;}
        case 7: {this.USER_BET = (Integer)__val; break;}
        case 8: {this.USER_GRAB = (Integer)__val; break;}
        case 9: {this.CARDS = (String)__val; break;}
        case 10: {this.SHOW_HAND_CARDS = (String)__val; break;}
        case 11: {this.MIDDLE_CARD_TYPE = (String)__val; break;}
        case 12: {this.CARD_TYPE = (String)__val; break;}
        case 13: {this.MIDDLE_SCORE = (Integer)__val; break;}
        case 14: {this.MIDDLE_TOTAL = (Integer)__val; break;}
        case 15: {this.MIDDLE_DRAW = (Float)__val; break;}
        case 16: {this.END_SCORE = (Integer)__val; break;}
        case 17: {this.END_TOTAL = (Integer)__val; break;}
        case 18: {this.END_DRAW = (Float)__val; break;}
        case 19: {this.IS_DEALER = (Boolean)__val; break;}
        case 20: {this.STATUS = (Integer)__val; break;}
        case 21: {this.CREATE_TIME = (java.util.Date)__val; break;}
        case 22: {this.END_TIME = (java.util.Date)__val; break;}
        }
    }

    // DON'T Invoke This Method Manually.
    @Override
    @SuppressWarnings("rawtypes")
    public Comparable _getValue(int __fidx){
        switch (__fidx){
        case 1: {return this.ID;}
        case 2: {return this.ROOM_ID;}
        case 3: {return this.INNING;}
        case 4: {return this.USER_ID;}
        case 5: {return this.USER_NAME;}
        case 6: {return this.SEAT_ID;}
        case 7: {return this.USER_BET;}
        case 8: {return this.USER_GRAB;}
        case 9: {return this.CARDS;}
        case 10: {return this.SHOW_HAND_CARDS;}
        case 11: {return this.MIDDLE_CARD_TYPE;}
        case 12: {return this.CARD_TYPE;}
        case 13: {return this.MIDDLE_SCORE;}
        case 14: {return this.MIDDLE_TOTAL;}
        case 15: {return this.MIDDLE_DRAW;}
        case 16: {return this.END_SCORE;}
        case 17: {return this.END_TOTAL;}
        case 18: {return this.END_DRAW;}
        case 19: {return this.IS_DEALER;}
        case 20: {return this.STATUS;}
        case 21: {return this.CREATE_TIME;}
        case 22: {return this.END_TIME;}
        }
        return null;
    }

    /**
    * Default constructor for JavaBean convention
    * DON'T manually use constructor. Please use <code>create<code> instead.
    */
    public TRoomInnings(){}

    /**
    * Constructor for creating a new instance.
    * Arguments are index keys
    * DON'T manually use constructor. Please use <code>create<code> instead.
    */
    public TRoomInnings(int ID){
        this.ID = ID;
    }

    @Override
    public String _getCacheKey(){
        return _genKey(ID);
    }

    public static ArrayList<TRoomInnings> getAllObjects(){
        ArrayList<Object> __tmp = _tableCache.loadAll();

        ArrayList<TRoomInnings> __res = new ArrayList<TRoomInnings>();
        for (Object __obj: __tmp){
            __res.add((TRoomInnings)__obj);
        }

        return __res;
    }

    /**
    * update an JPO to database.
    * @return return true if updated successfully, otherwise return false
    */
    @Override
    public boolean update(){
        int __res = _tableCache.update(this, _updateSQL, 
            ROOM_ID, INNING, USER_ID, USER_NAME, 
            SEAT_ID, USER_BET, USER_GRAB, CARDS, 
            SHOW_HAND_CARDS, MIDDLE_CARD_TYPE, CARD_TYPE, MIDDLE_SCORE, 
            MIDDLE_TOTAL, MIDDLE_DRAW, END_SCORE, END_TOTAL, 
            END_DRAW, IS_DEALER, STATUS, CREATE_TIME, 
            END_TIME, ID);

        return (__res > 0);
    }

    /**
    * update JPO in batch.
    * @return num of records successfully updated.
    */
    public static int updateBatch(TRoomInnings[] objList){
        Object[][] argv = new Object[objList.length][];

        for (int idx = 0; idx < objList.length; idx++){
            TRoomInnings o = objList[idx];
            Object[] args = new Object[]{
                o.ROOM_ID, o.INNING, o.USER_ID, o.USER_NAME, 
                o.SEAT_ID, o.USER_BET, o.USER_GRAB, o.CARDS, 
                o.SHOW_HAND_CARDS, o.MIDDLE_CARD_TYPE, o.CARD_TYPE, o.MIDDLE_SCORE, 
                o.MIDDLE_TOTAL, o.MIDDLE_DRAW, o.END_SCORE, o.END_TOTAL, 
                o.END_DRAW, o.IS_DEALER, o.STATUS, o.CREATE_TIME, 
                o.END_TIME, o.ID};

            argv[idx] = args;
        }

        return _tableCache.updateBatch(objList, _updateSQL, argv);
    }

    /**
    * update JPO by QueryCriteria.
    * @return num of records successfully updated.
    */
    public static int updateByCriteria(TableBase.AttributeValue<?>[] valueList, QueryCriteria ...qcList){
        return _tableCache.updateByCriteria(valueList, qcList);
    }

    /**
    * remove an JPO from database and cache.
    * @return true if successfully removed, otherwise return false
    */
    @Override
    public boolean remove(){
        int __res = _tableCache.remove(this, _deleteSQL, ID);
        return (__res > 0);
    }

    /**
    * remove JPOs in batch from database and cache.
    * @return num of records successfully removed.
    */
    public static int removeBatch(TRoomInnings[] objList){
        Object argv[] = new Object[objList.length];

        for (int idx = 0; idx < objList.length; idx++){
            argv[idx] = objList[idx].ID;
        }

        int res = _tableCache.removeBatch(objList, _deleteSQL, argv);
        return res;
    }

    /**
    * remove JPOs from database and cache by criteria.
    * @return num of records removed.
    */
    public static int removeByCriteria(QueryCriteria qc, QueryCriteria ...moreQcs){
        return _tableCache.removeByCriteria(qc, moreQcs);
    }

    /**
    * remove all JPOs from database and cache.
    * CAUTION: this operation is irrevocable.
    * @return num of records removed.
    */
    public static int __removeAll(){
        return _tableCache.removeAll();
    }

    /**
    * create a new JPO.<br>
    * If the a record with the same index in the cache is found,<br>
    * the cached object is return, and no DB record is created.<br>
    * Otherwise a new record is created and return, and a DB record is created.
    * @return an JPO if successfully created, null otherwise.
    */
    public static TRoomInnings create(){

        TRoomInnings __newObj = new TRoomInnings();

        return (TRoomInnings) _tableCache.create(__newObj, _createSQL, 
            __newObj.ROOM_ID, __newObj.INNING, __newObj.USER_ID, __newObj.USER_NAME, 
            __newObj.SEAT_ID, __newObj.USER_BET, __newObj.USER_GRAB, __newObj.CARDS, 
            __newObj.SHOW_HAND_CARDS, __newObj.MIDDLE_CARD_TYPE, __newObj.CARD_TYPE, __newObj.MIDDLE_SCORE, 
            __newObj.MIDDLE_TOTAL, __newObj.MIDDLE_DRAW, __newObj.END_SCORE, __newObj.END_TOTAL, 
            __newObj.END_DRAW, __newObj.IS_DEALER, __newObj.STATUS, __newObj.CREATE_TIME, 
            __newObj.END_TIME);
    }

    /**
    * Create a new JPO with initial values.<br>
    * Non-auto-incremental index is required<br>
    * If a field is set for more than one time<br>,
    * subsequent set will surpass preceding set.<br>
    * If the a record with the same index in the cache is found,<br>
    * the cached object is return, and no DB record is created.<br>
    * Otherwise a new record is created and return, and a DB record is created.
    * @return an JPO if successfully created, null otherwise.
    */
    public static TRoomInnings create(
            TableBase.AttributeValue<?> attrVal,
            TableBase.AttributeValue<?>... attrVals){

        TRoomInnings __newObj = new TRoomInnings();

        if (null != attrVal.getVal()){
            __newObj._setValue(attrVal.getFidx(), attrVal.getVal());
        }

        for (TableBase.AttributeValue<?> attrV: attrVals){
            if (null != attrV.getVal()){
                __newObj._setValue(attrV.getFidx(), attrV.getVal());
            }
        }

        return (TRoomInnings) _tableCache.create(__newObj, _createSQL, 
            __newObj.ROOM_ID, __newObj.INNING, __newObj.USER_ID, __newObj.USER_NAME, 
            __newObj.SEAT_ID, __newObj.USER_BET, __newObj.USER_GRAB, __newObj.CARDS, 
            __newObj.SHOW_HAND_CARDS, __newObj.MIDDLE_CARD_TYPE, __newObj.CARD_TYPE, __newObj.MIDDLE_SCORE, 
            __newObj.MIDDLE_TOTAL, __newObj.MIDDLE_DRAW, __newObj.END_SCORE, __newObj.END_TOTAL, 
            __newObj.END_DRAW, __newObj.IS_DEALER, __newObj.STATUS, __newObj.CREATE_TIME, 
            __newObj.END_TIME);
    }

    /**
    * find a JPO by indexes.
    * @return the found JPO or null
    */
    public static TRoomInnings getOne(int ID){
        return (TRoomInnings) _tableCache.getOne(_genKey(ID), _querySQL, ID);
    }

    /**
    * find a JPO by arbitrary query criteria.
    * @return the found JPO or null
    */
    public static TRoomInnings getOneByCriteria(QueryCriteria ...criteria){
        return (TRoomInnings)_tableCache.getOneByCriteria(criteria);
    }

    /**
    * find all JPOs those match the query criteria list.
    * @return a list of JPO found.
    */
    public static ArrayList<TRoomInnings> getManyByCriteria(QueryCriteria ...criteria){
        ArrayList<Object> __tmp = _tableCache.getManyByCriteria(criteria);

        ArrayList<TRoomInnings> __res = new ArrayList<TRoomInnings>();
        for (Object __obj: __tmp){
            __res.add((TRoomInnings)__obj);
        }

        return __res;
    }

    /**
    * find a JPO by arbitrary SQL statement.
    * @return return the found JPO or null.
    */
    public static TRoomInnings getOneBySQL(String sql, Object ...args){
        return (TRoomInnings)_tableCache.getOneBySQL(sql, args);
    }

    /**
    * find all JPOs by arbitrary SQL statement.
    * @return a list of JPO found.
    */
    public static ArrayList<TRoomInnings> getManyBySQL(String sql, Object ...args){
        ArrayList<Object> __tmp = _tableCache.getManyBySQL(sql, args);

        ArrayList<TRoomInnings> __res = new ArrayList<TRoomInnings>();
        for (Object __obj: __tmp){
            __res.add((TRoomInnings)__obj);
        }

        return __res;
    }

    /**
    * query objects from database by specified class Type
    * @return a list of OBJECT found.
    */
    public static <T> ArrayList<T> getManyByArbitarySQL(Class<T> clazz, String sql, Object[] args){
        return _tableCache._queryByArbitarySQL(clazz, sql, args);
    }

}

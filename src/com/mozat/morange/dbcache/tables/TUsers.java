/*
* @Brief: Java Persistence Class (JPC) for Database Table.
*
* @Class: TUsers
* @Namespace: com.mozat.morange.dbcache.tables
* @Table: USERS
* @Primary Key: ID
* @Identity: ID
* @Unique Index: [u'LOGIN_ID']
*
* @Caution: This file is Auto Generated.
*     DO NOT modify this file EVEN IF you know what you are doing.
*/

package com.mozat.morange.dbcache.tables;

import java.util.ArrayList;
import java.util.HashMap;
import com.mozat.morange.dbcache.core.TableBase;
import com.mozat.morange.dbcache.core.TableCache;
import com.mozat.morange.dbcache.core.QueryCriteria;

public final class TUsers extends TableBase implements java.io.Serializable{
    // Serializable ID
    private static final long serialVersionUID = 1L;

    private static TableCache _tableCache;
    private static String _tableName;

    private static boolean _isIdAutoGenerated = true;

    /**
    * This method is used by the engine.<br>
    * DON'T use this method under any circumstances.
    */
    @Override
    public TableCache _getTableCache(){return _tableCache;}

    /**
    * Never manually run SQL statements using TableCache Object.<br>
    * Think twice before hand-writing ANY SQL statements, and use it carefully.
    */
    @Deprecated
    public static TableCache __getTableCache(){return _tableCache;}

    @Override
    public String _getTableName(){return _tableName;}

    public static String __getTableName(){return _tableName;}

    public static void setCacheAndName(TableCache cache, String name){
        _tableCache = cache;
        _tableName = name;
    }

    @Override
    public Long _getIdValue(){
        Integer _idVal = this.ID;
        return _idVal.longValue();
    }

    @Override
    public void _setIdValue(Long _val){
        this.ID = _val.intValue();
    }

    @Override
    public boolean _isIdAutoGenerated(){
        return _isIdAutoGenerated;
    }


    // SQL templates
    private static final String _updateSQL = "UPDATE USERS SET `LOGIN_ID` = ?, `AGENT_ID` = ?, `RANK` = ?, `NAME` = ?, `LANG` = ?, `PWD` = ?, `COUNTRY_CODE` = ?, `PHONE` = ?, `FB_ID` = ?, `ROOM_CARD_COUNT` = ?, `COIN_COUNT` = ?, `WIN_COUNT` = ?, `SID` = ?, `OS` = ?, `PHONE_TYPE` = ?, `REG_IP` = ?, `LAST_IP` = ?, `MAC_ID` = ?, `GENDER` = ?, `AVATAR_ID` = ?, `CREATE_TIME` = ? WHERE `ID` = ?;";
    private static final String _querySQL = "SELECT * FROM USERS WHERE `LOGIN_ID` = ?;";
    private static final String _createSQL = "INSERT INTO USERS (`LOGIN_ID`, `AGENT_ID`, `RANK`, `NAME`, `LANG`, `PWD`, `COUNTRY_CODE`, `PHONE`, `FB_ID`, `ROOM_CARD_COUNT`, `COIN_COUNT`, `WIN_COUNT`, `SID`, `OS`, `PHONE_TYPE`, `REG_IP`, `LAST_IP`, `MAC_ID`, `GENDER`, `AVATAR_ID`, `CREATE_TIME`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
    private static final String _deleteSQL = "DELETE FROM USERS WHERE `ID` = ?;";

    // Field Map
    private static HashMap<String, Integer> AttrFieldMap;
    private static HashMap<String, Integer> getFieldMap(){
        if (AttrFieldMap == null){
            AttrFieldMap = new HashMap<String, Integer>();
            AttrFieldMap.put("ID", 1);
            AttrFieldMap.put("LOGIN_ID", 2);
            AttrFieldMap.put("AGENT_ID", 3);
            AttrFieldMap.put("RANK", 4);
            AttrFieldMap.put("NAME", 5);
            AttrFieldMap.put("LANG", 6);
            AttrFieldMap.put("PWD", 7);
            AttrFieldMap.put("COUNTRY_CODE", 8);
            AttrFieldMap.put("PHONE", 9);
            AttrFieldMap.put("FB_ID", 10);
            AttrFieldMap.put("ROOM_CARD_COUNT", 11);
            AttrFieldMap.put("COIN_COUNT", 12);
            AttrFieldMap.put("WIN_COUNT", 13);
            AttrFieldMap.put("SID", 14);
            AttrFieldMap.put("OS", 15);
            AttrFieldMap.put("PHONE_TYPE", 16);
            AttrFieldMap.put("REG_IP", 17);
            AttrFieldMap.put("LAST_IP", 18);
            AttrFieldMap.put("MAC_ID", 19);
            AttrFieldMap.put("GENDER", 20);
            AttrFieldMap.put("AVATAR_ID", 21);
            AttrFieldMap.put("CREATE_TIME", 22);
        }

        return AttrFieldMap;
    }

    // Attributes Wrapper for Query
    public static final TableBase.Attribute<Integer> AttrID = new TableBase.Attribute<Integer>("ID", TUsers.class, 1);
    public static final TableBase.AttributeS AttrLOGIN_ID = new TableBase.AttributeS("LOGIN_ID", TUsers.class, 2);
    public static final TableBase.AttributeS AttrAGENT_ID = new TableBase.AttributeS("AGENT_ID", TUsers.class, 3);
    public static final TableBase.Attribute<Integer> AttrRANK = new TableBase.Attribute<Integer>("RANK", TUsers.class, 4);
    public static final TableBase.AttributeS AttrNAME = new TableBase.AttributeS("NAME", TUsers.class, 5);
    public static final TableBase.AttributeS AttrLANG = new TableBase.AttributeS("LANG", TUsers.class, 6);
    public static final TableBase.AttributeS AttrPWD = new TableBase.AttributeS("PWD", TUsers.class, 7);
    public static final TableBase.AttributeS AttrCOUNTRY_CODE = new TableBase.AttributeS("COUNTRY_CODE", TUsers.class, 8);
    public static final TableBase.AttributeS AttrPHONE = new TableBase.AttributeS("PHONE", TUsers.class, 9);
    public static final TableBase.AttributeS AttrFB_ID = new TableBase.AttributeS("FB_ID", TUsers.class, 10);
    public static final TableBase.Attribute<Integer> AttrROOM_CARD_COUNT = new TableBase.Attribute<Integer>("ROOM_CARD_COUNT", TUsers.class, 11);
    public static final TableBase.Attribute<Integer> AttrCOIN_COUNT = new TableBase.Attribute<Integer>("COIN_COUNT", TUsers.class, 12);
    public static final TableBase.Attribute<Integer> AttrWIN_COUNT = new TableBase.Attribute<Integer>("WIN_COUNT", TUsers.class, 13);
    public static final TableBase.Attribute<Integer> AttrSID = new TableBase.Attribute<Integer>("SID", TUsers.class, 14);
    public static final TableBase.AttributeS AttrOS = new TableBase.AttributeS("OS", TUsers.class, 15);
    public static final TableBase.AttributeS AttrPHONE_TYPE = new TableBase.AttributeS("PHONE_TYPE", TUsers.class, 16);
    public static final TableBase.AttributeS AttrREG_IP = new TableBase.AttributeS("REG_IP", TUsers.class, 17);
    public static final TableBase.AttributeS AttrLAST_IP = new TableBase.AttributeS("LAST_IP", TUsers.class, 18);
    public static final TableBase.AttributeS AttrMAC_ID = new TableBase.AttributeS("MAC_ID", TUsers.class, 19);
    public static final TableBase.Attribute<Integer> AttrGENDER = new TableBase.Attribute<Integer>("GENDER", TUsers.class, 20);
    public static final TableBase.Attribute<Integer> AttrAVATAR_ID = new TableBase.Attribute<Integer>("AVATAR_ID", TUsers.class, 21);
    public static final TableBase.Attribute<java.util.Date> AttrCREATE_TIME = new TableBase.Attribute<java.util.Date>("CREATE_TIME", TUsers.class, 22);

    public static TableBase.AttributeValue<?>[] valueList(TableBase.AttributeValue<?>...valList){
        return valList;
    }

    // Member Fields.
    public int ID = 0;
    public String LOGIN_ID = "";
    public String AGENT_ID = "";
    public int RANK = 0;
    public String NAME = "";
    public String LANG = "";
    public String PWD = "";
    public String COUNTRY_CODE = "";
    public String PHONE = "";
    public String FB_ID = "";
    public int ROOM_CARD_COUNT = 0;
    public int COIN_COUNT = 0;
    public int WIN_COUNT = 0;
    public int SID = 0;
    public String OS = "";
    public String PHONE_TYPE = "";
    public String REG_IP = "";
    public String LAST_IP = "";
    public String MAC_ID = "";
    public int GENDER = 0;
    public int AVATAR_ID = 0;
    public java.util.Date CREATE_TIME = new java.util.Date(0);

    // DON'T Invoke This Method Manually.
    @Override
    public HashMap<String, Integer> _getFieldMap(){
        return TUsers.getFieldMap();
    }

    // DON'T Invoke This Method Manually.
    @Override
    public void _setValue(int __fidx, Object __val){
        switch (__fidx){
        case 1: {this.ID = (Integer)__val; break;}
        case 2: {this.LOGIN_ID = (String)__val; break;}
        case 3: {this.AGENT_ID = (String)__val; break;}
        case 4: {this.RANK = (Integer)__val; break;}
        case 5: {this.NAME = (String)__val; break;}
        case 6: {this.LANG = (String)__val; break;}
        case 7: {this.PWD = (String)__val; break;}
        case 8: {this.COUNTRY_CODE = (String)__val; break;}
        case 9: {this.PHONE = (String)__val; break;}
        case 10: {this.FB_ID = (String)__val; break;}
        case 11: {this.ROOM_CARD_COUNT = (Integer)__val; break;}
        case 12: {this.COIN_COUNT = (Integer)__val; break;}
        case 13: {this.WIN_COUNT = (Integer)__val; break;}
        case 14: {this.SID = (Integer)__val; break;}
        case 15: {this.OS = (String)__val; break;}
        case 16: {this.PHONE_TYPE = (String)__val; break;}
        case 17: {this.REG_IP = (String)__val; break;}
        case 18: {this.LAST_IP = (String)__val; break;}
        case 19: {this.MAC_ID = (String)__val; break;}
        case 20: {this.GENDER = (Integer)__val; break;}
        case 21: {this.AVATAR_ID = (Integer)__val; break;}
        case 22: {this.CREATE_TIME = (java.util.Date)__val; break;}
        }
    }

    // DON'T Invoke This Method Manually.
    @Override
    @SuppressWarnings("rawtypes")
    public Comparable _getValue(int __fidx){
        switch (__fidx){
        case 1: {return this.ID;}
        case 2: {return this.LOGIN_ID;}
        case 3: {return this.AGENT_ID;}
        case 4: {return this.RANK;}
        case 5: {return this.NAME;}
        case 6: {return this.LANG;}
        case 7: {return this.PWD;}
        case 8: {return this.COUNTRY_CODE;}
        case 9: {return this.PHONE;}
        case 10: {return this.FB_ID;}
        case 11: {return this.ROOM_CARD_COUNT;}
        case 12: {return this.COIN_COUNT;}
        case 13: {return this.WIN_COUNT;}
        case 14: {return this.SID;}
        case 15: {return this.OS;}
        case 16: {return this.PHONE_TYPE;}
        case 17: {return this.REG_IP;}
        case 18: {return this.LAST_IP;}
        case 19: {return this.MAC_ID;}
        case 20: {return this.GENDER;}
        case 21: {return this.AVATAR_ID;}
        case 22: {return this.CREATE_TIME;}
        }
        return null;
    }

    /**
    * Default constructor for JavaBean convention
    * DON'T manually use constructor. Please use <code>create<code> instead.
    */
    public TUsers(){}

    /**
    * Constructor for creating a new instance.
    * Arguments are index keys
    * DON'T manually use constructor. Please use <code>create<code> instead.
    */
    public TUsers(String LOGIN_ID){
        this.LOGIN_ID = LOGIN_ID;
    }

    @Override
    public String _getCacheKey(){
        return _genKey(LOGIN_ID);
    }

    public static ArrayList<TUsers> getAllObjects(){
        ArrayList<Object> __tmp = _tableCache.loadAll();

        ArrayList<TUsers> __res = new ArrayList<TUsers>();
        for (Object __obj: __tmp){
            __res.add((TUsers)__obj);
        }

        return __res;
    }

    /**
    * update an JPO to database.
    * @return return true if updated successfully, otherwise return false
    */
    @Override
    public boolean update(){
        int __res = _tableCache.update(this, _updateSQL, 
            LOGIN_ID, AGENT_ID, RANK, NAME, 
            LANG, PWD, COUNTRY_CODE, PHONE, 
            FB_ID, ROOM_CARD_COUNT, COIN_COUNT, WIN_COUNT, 
            SID, OS, PHONE_TYPE, REG_IP, 
            LAST_IP, MAC_ID, GENDER, AVATAR_ID, 
            CREATE_TIME, ID);

        return (__res > 0);
    }

    /**
    * update JPO in batch.
    * @return num of records successfully updated.
    */
    public static int updateBatch(TUsers[] objList){
        Object[][] argv = new Object[objList.length][];

        for (int idx = 0; idx < objList.length; idx++){
            TUsers o = objList[idx];
            Object[] args = new Object[]{
                o.LOGIN_ID, o.AGENT_ID, o.RANK, o.NAME, 
                o.LANG, o.PWD, o.COUNTRY_CODE, o.PHONE, 
                o.FB_ID, o.ROOM_CARD_COUNT, o.COIN_COUNT, o.WIN_COUNT, 
                o.SID, o.OS, o.PHONE_TYPE, o.REG_IP, 
                o.LAST_IP, o.MAC_ID, o.GENDER, o.AVATAR_ID, 
                o.CREATE_TIME, o.ID};

            argv[idx] = args;
        }

        return _tableCache.updateBatch(objList, _updateSQL, argv);
    }

    /**
    * update JPO by QueryCriteria.
    * @return num of records successfully updated.
    */
    public static int updateByCriteria(TableBase.AttributeValue<?>[] valueList, QueryCriteria ...qcList){
        return _tableCache.updateByCriteria(valueList, qcList);
    }

    /**
    * remove an JPO from database and cache.
    * @return true if successfully removed, otherwise return false
    */
    @Override
    public boolean remove(){
        int __res = _tableCache.remove(this, _deleteSQL, ID);
        return (__res > 0);
    }

    /**
    * remove JPOs in batch from database and cache.
    * @return num of records successfully removed.
    */
    public static int removeBatch(TUsers[] objList){
        Object argv[] = new Object[objList.length];

        for (int idx = 0; idx < objList.length; idx++){
            argv[idx] = objList[idx].ID;
        }

        int res = _tableCache.removeBatch(objList, _deleteSQL, argv);
        return res;
    }

    /**
    * remove JPOs from database and cache by criteria.
    * @return num of records removed.
    */
    public static int removeByCriteria(QueryCriteria qc, QueryCriteria ...moreQcs){
        return _tableCache.removeByCriteria(qc, moreQcs);
    }

    /**
    * remove all JPOs from database and cache.
    * CAUTION: this operation is irrevocable.
    * @return num of records removed.
    */
    public static int __removeAll(){
        return _tableCache.removeAll();
    }

    /**
    * create a new JPO.<br>
    * If the a record with the same index in the cache is found,<br>
    * the cached object is return, and no DB record is created.<br>
    * Otherwise a new record is created and return, and a DB record is created.
    * @return an JPO if successfully created, null otherwise.
    */
    public static TUsers create(String LOGIN_ID){

        TUsers __newObj = new TUsers(LOGIN_ID);

        return (TUsers) _tableCache.create(__newObj, _createSQL, 
            __newObj.LOGIN_ID, __newObj.AGENT_ID, __newObj.RANK, __newObj.NAME, 
            __newObj.LANG, __newObj.PWD, __newObj.COUNTRY_CODE, __newObj.PHONE, 
            __newObj.FB_ID, __newObj.ROOM_CARD_COUNT, __newObj.COIN_COUNT, __newObj.WIN_COUNT, 
            __newObj.SID, __newObj.OS, __newObj.PHONE_TYPE, __newObj.REG_IP, 
            __newObj.LAST_IP, __newObj.MAC_ID, __newObj.GENDER, __newObj.AVATAR_ID, 
            __newObj.CREATE_TIME);
    }

    /**
    * Create a new JPO with initial values.<br>
    * Non-auto-incremental index is required<br>
    * If a field is set for more than one time<br>,
    * subsequent set will surpass preceding set.<br>
    * If the a record with the same index in the cache is found,<br>
    * the cached object is return, and no DB record is created.<br>
    * Otherwise a new record is created and return, and a DB record is created.
    * @return an JPO if successfully created, null otherwise.
    */
    public static TUsers create(String LOGIN_ID, 
            TableBase.AttributeValue<?> attrVal,
            TableBase.AttributeValue<?>... attrVals){

        TUsers __newObj = new TUsers(LOGIN_ID);

        if (null != attrVal.getVal()){
            __newObj._setValue(attrVal.getFidx(), attrVal.getVal());
        }

        for (TableBase.AttributeValue<?> attrV: attrVals){
            if (null != attrV.getVal()){
                __newObj._setValue(attrV.getFidx(), attrV.getVal());
            }
        }

        return (TUsers) _tableCache.create(__newObj, _createSQL, 
            __newObj.LOGIN_ID, __newObj.AGENT_ID, __newObj.RANK, __newObj.NAME, 
            __newObj.LANG, __newObj.PWD, __newObj.COUNTRY_CODE, __newObj.PHONE, 
            __newObj.FB_ID, __newObj.ROOM_CARD_COUNT, __newObj.COIN_COUNT, __newObj.WIN_COUNT, 
            __newObj.SID, __newObj.OS, __newObj.PHONE_TYPE, __newObj.REG_IP, 
            __newObj.LAST_IP, __newObj.MAC_ID, __newObj.GENDER, __newObj.AVATAR_ID, 
            __newObj.CREATE_TIME);
    }

    /**
    * find a JPO by indexes.
    * @return the found JPO or null
    */
    public static TUsers getOne(String LOGIN_ID){
        return (TUsers) _tableCache.getOne(_genKey(LOGIN_ID), _querySQL, LOGIN_ID);
    }

    /**
    * find a JPO by arbitrary query criteria.
    * @return the found JPO or null
    */
    public static TUsers getOneByCriteria(QueryCriteria ...criteria){
        return (TUsers)_tableCache.getOneByCriteria(criteria);
    }

    /**
    * find all JPOs those match the query criteria list.
    * @return a list of JPO found.
    */
    public static ArrayList<TUsers> getManyByCriteria(QueryCriteria ...criteria){
        ArrayList<Object> __tmp = _tableCache.getManyByCriteria(criteria);

        ArrayList<TUsers> __res = new ArrayList<TUsers>();
        for (Object __obj: __tmp){
            __res.add((TUsers)__obj);
        }

        return __res;
    }

    /**
    * find a JPO by arbitrary SQL statement.
    * @return return the found JPO or null.
    */
    public static TUsers getOneBySQL(String sql, Object ...args){
        return (TUsers)_tableCache.getOneBySQL(sql, args);
    }

    /**
    * find all JPOs by arbitrary SQL statement.
    * @return a list of JPO found.
    */
    public static ArrayList<TUsers> getManyBySQL(String sql, Object ...args){
        ArrayList<Object> __tmp = _tableCache.getManyBySQL(sql, args);

        ArrayList<TUsers> __res = new ArrayList<TUsers>();
        for (Object __obj: __tmp){
            __res.add((TUsers)__obj);
        }

        return __res;
    }

    /**
    * query objects from database by specified class Type
    * @return a list of OBJECT found.
    */
    public static <T> ArrayList<T> getManyByArbitarySQL(Class<T> clazz, String sql, Object[] args){
        return _tableCache._queryByArbitarySQL(clazz, sql, args);
    }

}
